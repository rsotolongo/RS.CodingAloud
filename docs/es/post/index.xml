<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Programando en voz alta</title>
    <link>/es/post/</link>
    <description>Recent content in Posts on Programando en voz alta</description>
    <generator>Hugo</generator>
    <language>es</language>
    <lastBuildDate>Mon, 17 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/es/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Valor insensitivo en la QueryString</title>
      <link>/es/post/insensitive-query-string-value/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/es/post/insensitive-query-string-value/</guid>
      <description>&lt;p&gt;Recientemente tuve una situación donde necesitaba en el cliente el valor de un parámetro específico de la query string del pedido y necesitaba estar completamente seguro de que podría encontrar el parámetro sin importar si estuviese en mayúsculas, minúsculas o cualquier combinación de estas. Con ese propósito cree la siguiente función en TypeScript:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getInsensitiveQueryStringValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queryParams&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;paramKey&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queryParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;paramKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queryParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Comandos asíncronos</title>
      <link>/es/post/asynchronous-commands/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/asynchronous-commands/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/AsyncCommands&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Recientemente tuve que implementar una aplicación simple con Windows Presentation Framework (WPF) usando el patrón Model-View-ViewModel (MVVM). Me sorprendí cuando noté que no había una solución simple lista para usar para enlazar comandos asíncronos, así que decidí crear mis implementaciones para ellos.&lt;/p&gt;&#xA;&lt;p&gt;También quiero ser genérico, así que comencé a definir la interfaz más general que hereda de ICommand (incluida en el espacio de nombres: &amp;ldquo;System.Windows.Input&amp;rdquo;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publicación inmediata</title>
      <link>/es/post/immediate-publishing/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/immediate-publishing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/ImmediatePublishing&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Érase una vez una solución, alojada en un proyecto de equipo en Team Foundation Services (TFS) que fue descargada por primera vez. Sabía que la solución compilaba y podía publicarse sin problemas de inmediato. Pero me llevé una sorpresa porque ambos procesos fallaron. La figura 1 muestra una estructura simplificada del proyecto.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/immediate-publishing/01.png&#34; alt=&#34;Estructura del proyecto&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Figura 1: &amp;ldquo;Estructura del proyecto&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;La figura 2 muestra cómo se configuró el proyecto para generar su documentación:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generando clientes de Swagger/OpenAPI</title>
      <link>/es/post/generating-swagger-openapi-clients/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/generating-swagger-openapi-clients/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/ConnectedServices&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Recientemente, estaba desarrollando una aplicación web .NET Core que necesita consumir una API desarrollada hace unos años usando ASP.NET WebAPI. Afortunadamente, esa API tenía Swagger integrado, así que pensé que podía ahorrar tiempo al no crear manualmente los instrumentos necesarios para las llamadas a la API (DTO, cliente, etc.) en su lugar podría utilizar la función &amp;ldquo;Servicios Conectados&amp;rdquo; de Visual Studio.&lt;/p&gt;&#xA;&lt;p&gt;Me llevé una gran sorpresa que me inspiró a compartir la experiencia y la solución en este post. Reproduje un escenario simplificado como se puede ver en la figura 1 accediendo a Swagger UI a través de su URL: &amp;ldquo;http://localhost:5200/swagger&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firmando ensamblados</title>
      <link>/es/post/signing-assemblies/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/signing-assemblies/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/SigningAssemblies&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;net-core&#34;&gt;.NET Core&lt;/h2&gt;&#xA;&lt;p&gt;No todos los clientes requieren firmar los ensamblados de sus aplicaciones, pero cuando es necesario, la tarea no es tan fácil como cabría esperar.&lt;/p&gt;&#xA;&lt;p&gt;En el caso de las aplicaciones .NET Core, podemos lograr esto simplemente editando el archivo del proyecto (.csproj) agregando el siguiente código:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BuildSigning&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;AfterTargets=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;AfterBuild&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Command=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SIGNING_COMMAND&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Como ejemplo, &lt;strong&gt;SIGNING_COMMAND&lt;/strong&gt; podría ser:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;ldquo;C\Program Files (x86)\Windows Kits\10\bin\10.0.177630\x64\signtool.exe&amp;rdquo;&lt;/em&gt; &lt;em&gt;sign /f &amp;ldquo;$(SolutionDir)certificate.pfx&amp;rdquo; /p &amp;ldquo;pass&amp;amp;1234&amp;rdquo; &amp;ldquo;S(TargetDir)&lt;/em&gt;.dll&amp;rdquo;*&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generando certificados de firma</title>
      <link>/es/post/generating-signature-certificates/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/generating-signature-certificates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gist.github.com/rsotolongo/80410cee05c26a7bcb17327d0c279b86&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A veces, los ensamblados (ejecutables y bibliotecas) deben estar firmados y no tenemos un certificado disponible con fines de prueba. En este post pretendo mostrar cómo generar un certificado para firmar ensamblados.&lt;/p&gt;&#xA;&lt;p&gt;Primero, necesitamos instalar OpenSSL que podemos lograr siguiendo los pasos que se especifican en el siguiente enlace:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/swlh/installing-openssl-on-windows-10-and-updating-path-80992e26f6a1&#34;&gt;Instalación de OpenSSL en Windows 10 y actualización de PATH&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;En segundo lugar, creemos un archivo de secuencia de comandos por lotes llamado: &amp;ldquo;generateCertificate.cmd&amp;rdquo; con contenido:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Desplegando paquetes NuGet</title>
      <link>/es/post/deploying-nuget-packages/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/deploying-nuget-packages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/DeployPackages&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;En una publicación anterior vimos cómo: &amp;ldquo;&lt;a href=&#34;../create_nuget_packages&#34;&gt;Crear paquetes NuGet&lt;/a&gt;&amp;rdquo; pero el paso de despliegue aún era un proceso manual. Intentemos automatizar esto. La figura 1 muestra cómo generar un paquete NuGet para un proyecto de .NET Core (similar al enfoque mostrado anteriormente) utilizando las propiedades del proyecto.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/deploying-nuget-packages/01.png&#34; alt=&#34;Creando un paquete NuGet&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Figura 1: &amp;ldquo;Creando un paquete NuGet&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Esto agrega un par de líneas al archivo del proyecto (.csproj) como muestra la figura 2:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creando paquetes NuGet</title>
      <link>/es/post/creando-paquetes-nuget/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/creando-paquetes-nuget/</guid>
      <description>&lt;p&gt;Últimamente he estado involucrado en la creación de varios paquetes NuGet útiles para algunos portales que se están siendo desarrollando. Quiero compartir mis conocimientos en este tema.&lt;/p&gt;&#xA;&lt;p&gt;Si estuviéramos desarrollando bibliotecas para .NET Core o .NET Standard, la vida sería fácil, como muestra La figura 1 a La figura 8.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/creating-nuget-packages/01.png&#34; alt=&#34;Creación de una nueva biblioteca de .NET Core&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Figura 1: &amp;ldquo;Creación de una nueva biblioteca de .NET Core&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/creating-nuget-packages/02.png&#34; alt=&#34;Código predeterminado&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creando y desplegando aplicaciones usando Octopus</title>
      <link>/es/post/usando-octopus/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/usando-octopus/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rsotolongo/RS.Blog.Projects/tree/main/UsingOctopus&#34;&gt;Código fuente de apoyo disponible en GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Desde hace un tiempo quería compartir mis experiencias automatizando los despliegues de productos con Octopus desde Visual Studio. Nuevamente, hagámoslo con un ejemplo.&lt;/p&gt;&#xA;&lt;p&gt;Como no podía ser de otra manera, La figura 1 muestra el primer paquete que debes agregar a tu proyecto para poder crear paquetes Octopus listos para ser desplegados: &amp;ldquo;OctoPack&amp;rdquo;. La última versión del paquete disponible en el momento de este tutorial era la &amp;ldquo;3.6.1&amp;rdquo;, pero instalamos la &amp;ldquo;3.6.0&amp;rdquo; a propósito para mostrar el proceso de actualización.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Estilizando códigos usando StyleCop</title>
      <link>/es/post/estilo-de-c%C3%B3digo-usando-stylecop/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/estilo-de-c%C3%B3digo-usando-stylecop/</guid>
      <description>&lt;p&gt;Un colega me pidió que compartiera mi experiencia programando con ReSharper y, una vez que se enteró de que no uso ReSharper, sintió aún más curiosidad por saber cómo escribo los códigos fuentes. Quien me conoce sabe que me encantan los paquetes NuGet y estar actualizado constantemente, por eso encontré un paquete muy útil que instalo en todos mis proyectos apenas los inicio.&lt;/p&gt;&#xA;&lt;p&gt;StyleCop.MSBuild&lt;/p&gt;&#xA;&lt;p&gt;StyleCop solía ser una aplicación independiente con integración con Visual Studio, pero eso cambió hace un tiempo. Lo explicaré con un ejemplo. Comencemos a crear una aplicación de consola desde cero.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bienvenida</title>
      <link>/es/post/bienvenida/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/es/post/bienvenida/</guid>
      <description>&lt;p&gt;Les doy la bienvenida oficial a mi blog profesional, intentaré escribir frecuentemente sobre tecnologías de desarrollo, lenguajes de programación, estructuras de datos, algoritmos, entre otros temas vinculados con este increíble mundo tecnológico expresando siempre mis opiniones personales.&lt;/p&gt;&#xA;&lt;p&gt;Me decidí gracias a que sentí la necesidad imperiosa de escribir luego de acumular experiencia desarrollando software y constantemente explicar una y otra vez los conceptos, enfoques, y soluciones aplicados; unido a la recomendación de Scott Hanselman de escribir un artículo de todo aquello que no pueda ser explicado en seis oraciones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memorias</title>
      <link>/es/post/memorias/</link>
      <pubDate>Thu, 31 Dec 2020 23:59:00 +0000</pubDate>
      <guid>/es/post/memorias/</guid>
      <description>&lt;p&gt;Esta primera entrada es para listar todos los artículos previamente publicados en un antiguo blog que inicié en el 2006 cuando era profesor de la Universidad de Ciego de Ávila. Volviendo a leerlos, noto mucha ingenuidad, e imprecisiones pero quiero recordar que en aquel entonces mi acceso a Internet era muy limitado y mi experiencia profesional apenas comenzaba.&lt;/p&gt;&#xA;&lt;p&gt;Creo que hay muchas cosas que siguen siendo válidas hoy en día y pueden servir de ayuda todavía.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recuperar XML desde Delphi</title>
      <link>/es/post/recuperaci%C3%B3n-de-xml/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/recuperaci%C3%B3n-de-xml/</guid>
      <description>&lt;p&gt;En un artículo anterior vimos una solución a la generación de XML (Lenguaje de Marcas Extendido, siglas en inglés) desde el ambiente de desarrollo Borland Delphi; en este veremos como podemos capturar y utilizar dicho XML para otros usos.&lt;/p&gt;&#xA;&lt;p&gt;Para ello nos remitiremos a la misma agencia noticiosa deportiva en la cual nos basamos anteriormente, donde se pretendía cubrir las diferentes competiciones de un evento enviando las noticias y resultados a través de una aplicación diseñada por sus programadores. Si bien habíamos enfocado el problema desde el punto de vista de los reporteros (en este caso los clientes), ahora lo haremos desde el punto de vista servidor.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generar XML desde Delphi</title>
      <link>/es/post/generaci%C3%B3n-de-xml/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/generaci%C3%B3n-de-xml/</guid>
      <description>&lt;p&gt;En números anteriores de esta revista salió un artículo acerca de cómo generar XML (Lenguaje de Marcas Extendido –siglas en inglés) proveniente de una forma de HTML (Lenguaje de Marcado de Hipertexto –siglas en inglés) desde ASP (Active Server Pages) con la ayuda del objeto del sistema de ficheros (FileSystemObject). En este artículo veremos cómo hacerlo desde Delphi aprovechando algunas de las incontables ventajas de este ambiente de desarrollo.&lt;/p&gt;&#xA;&lt;p&gt;Recordemos primeramente que XML es un subconjunto de SGML (Lenguaje de Marcado Generalizado Estándar) y más que un simple lenguaje de marcas como su nombre sugiere es un meta-lenguaje que nos permite definir lenguajes de marcado adecuados a usos determinados y que está llamado a ser el nuevo ASCII debido a su fácil confección, transmisión y comprensión.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algunas consideraciones de Implementación</title>
      <link>/es/post/consideraciones-de-implementaci%C3%B3n/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/consideraciones-de-implementaci%C3%B3n/</guid>
      <description>&lt;p&gt;Creemos que es necesario comenzar este artículo sugiriendo la introducción de tres técnicas que, si bien no son nuevas, sí constituyen buenas prácticas dentro del desarrollo organizado de software.&lt;/p&gt;&#xA;&lt;p&gt;El acoplamiento de módulos, la compilación, la producción de ejecutables, la generación de reportes y la creación y restauración de copias de seguridad en la producción de sistemas informáticos constituyen tareas perfectamente automatizables. Las ventajas que puede traer el uso de esta técnica están estrechamente relacionadas con el tiempo total de desarrollo de los sistemas informáticos. Cuanto menor sea el tiempo que se dedique a este tipo de actividades mayor será el que se pueda invertir en hacer cumplir los requisitos funcionales del sistema. Dentro de los métodos más utilizados en esta técnica están la creación de archivos de ejecución por lotes combinados con los eventos calendariables que brindan los sistemas operativos modernos. FinalBuilder es una de las herramientas que brinda por igual estas facilidades de una forma visual y amena.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algunas consideraciones de Diseño</title>
      <link>/es/post/consideraciones-de-dise%C3%B1o/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/consideraciones-de-dise%C3%B1o/</guid>
      <description>&lt;p&gt;Dentro de las etapas en que se divide el ciclo de vida del desarrollo de software, el Diseño es considerada como la más importante. Se ha calculado que puede llegar a ocupar hasta un treinta y cinco por ciento del total de tiempo. Es por ello que abordaremos el tema para dar algunas consideraciones generales que siempre son válidas a tener en cuenta, sea cual sea el tipo de aplicación a desarrollar.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gobierno electrónico</title>
      <link>/es/post/gobierno-electr%C3%B3nico/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/gobierno-electr%C3%B3nico/</guid>
      <description>&lt;p&gt;Con la decisión de migrar todos sus sistemas y aplicaciones a Software Libre del gobierno alemán, hace ya uno tres años, estalló este fenómeno entre los diferentes países, llegando incluso a instancias particulares de ellos. Ejemplo de ello es España donde ya algunas de sus autonomías han tomado la misma decisión, otras no.&#xA;Lo cierto es que hay protestas por todo el mundo tanto de detractores como de los que piensan igual. Unos porque ven amenazados sus fuentes de ingresos y otros porque quieren que su gobierno haga lo mismo. El principal motivo por el cual la toman es porque &amp;ldquo;supuestamente&amp;rdquo; hay una reducción de costes en soluciones informáticas y eso permite mayores inversiones en otras cosas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>¿Se puede confiar ciegamente en Internet?</title>
      <link>/es/post/confianza-en-internet/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/confianza-en-internet/</guid>
      <description>&lt;p&gt;Internet se ha convertido poco a poco en la herramienta más útil del quehacer diario de las personas para un sin número de tareas que van desde la investigación científica hasta las compras y el ocio. Es por ello que constituye una fuente invaluable de conocimientos, pero ojo, no todo lo que brilla es oro.&lt;/p&gt;&#xA;&lt;p&gt;En varias ocasiones he leído como se descubren cosas insólitas que suceden en Internet, como la publicación de cómo confeccionar artefactos explosivos o de cómo se ponen de acuerdo miembros de sectas para suicidarse masivamente, etc. Podríamos catalogar lo antes publicado como el pago (si bien no necesario) que hay que hacer por las incontables ventajas que ella ofrece.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ISFUROS 2006</title>
      <link>/es/post/isfuros-2006/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/isfuros-2006/</guid>
      <description>&lt;p&gt;He estado tan ocupado en tareas aledañas que poco a poco fue pasando el tiempo y ni cuenta me di de que llevaba meses sin escribir nada, luego caí en un vacío profesional que no me incitaba a redactar nada hasta hoy mismo que luego de participar en el ISFUROS me llamé yo mismo a reflexionar y no dejar pasar inadvertido el evento.&lt;/p&gt;&#xA;&lt;p&gt;El International International Symposium on Fuzzy and Rough Sets (ISFUROS) fue un evento que se desarrolló en la UCLV del 4 al 6 de Diciembre del 2006. El comité Organizador hizo un trabajo encomiable y digno de elogiar pues a pesar de todas las carencias materiales que a diario nos entorpecen, el evento fue un éxito total, al menos yo lo considero así.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Poniéndome al día</title>
      <link>/es/post/poni%C3%A9ndonos-al-d%C3%ADa/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/es/post/poni%C3%A9ndonos-al-d%C3%ADa/</guid>
      <description>&lt;p&gt;No voy a ponerme a relatar las vicisitudes que llevaron a que prácticamente no tenga Internet a mi disposición, porque sería aburrirlos en vano y al final lo más seguro es que no entenderían y todo quedará igual, así que para qué perder el tiempo entonces; aprovechémoslo en otras cuestiones más importantes.&lt;/p&gt;&#xA;&lt;p&gt;Quise hacer esta breve introducción pues lo que quiero comentarles hoy se relaciona con este hecho precisamente. El pasado domingo día 3 de diciembre, vine a la Universidad temprano pues estaba de guardia todo el día y aprovecharía Internet para ponerme al día y confeccionar una serie de documentos atrasados que tenía.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
