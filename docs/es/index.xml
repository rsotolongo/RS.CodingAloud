<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programando en voz alta</title>
    <link>/es/</link>
    <description>Recent content on Programando en voz alta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/es/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Estilizando códigos usando StyleCop</title>
      <link>/es/post/estilo-de-c%C3%B3digo-usando-stylecop/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/es/post/estilo-de-c%C3%B3digo-usando-stylecop/</guid>
      
        <description>&lt;p&gt;Un colega me pidió que compartiera mi experiencia programando con ReSharper y, una vez que se enteró de que no uso ReSharper, sintió aún más curiosidad por saber cómo escribo los códigos fuentes. Quien me conoce sabe que me encantan los paquetes NuGet y estar actualizado constantemente, por eso encontré un paquete muy útil que instalo en todos mis proyectos apenas los inicio.&lt;/p&gt;
&lt;p&gt;StyleCop.MSBuild&lt;/p&gt;
&lt;p&gt;StyleCop solía ser una aplicación independiente con integración con Visual Studio, pero eso cambió hace un tiempo. Lo explicaré con un ejemplo. Comencemos a crear una aplicación de consola desde cero.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/01.png&#34; alt=&#34;Applicación de consola&#34;&gt;&lt;/p&gt;
&lt;p&gt;La figura 1 muestra una aplicación de consola recién creada en Visual Studio.&lt;/p&gt;
&lt;p&gt;Observe los 0 errores, 0 advertencias y 0 mensajes una vez que se compila. Instalemos el paquete NuGet y veamos qué sucede. La figura 2 muestra la administración de paquetes NuGet para la aplicación.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/02.png&#34; alt=&#34;Administrador de paquetes de la solución&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 2.&lt;/p&gt;
&lt;p&gt;La figura 3 muestra los resultados de la creación de la solución una vez que se instala ese paquete.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/03.png&#34; alt=&#34;Primeros resultados de compilación&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 3.&lt;/p&gt;
&lt;p&gt;Note las 11 advertencias. Mi filosofía personal es entregar productos sin errores (eso es lógico porque los compiladores y administradores lo buscan); cero advertencias (pocas herramientas y personas le impiden implementar con advertencias); y cero mensajes (prácticamente a nadie le importa esto).&lt;/p&gt;
&lt;p&gt;La mayoría de las advertencias recibidas se explican por sí mismas y son fáciles de solucionar. Analicémoslsas una por una.&lt;/p&gt;
&lt;p&gt;La primera y el última están relacionadas con el hecho de que los archivos &amp;ldquo;Program.cs&amp;rdquo; y &amp;ldquo;AssemblyInfo.cs&amp;rdquo; no tienen encabezado y se pueden arreglar simplemente agregando un encabezado en formato XML que contenga el nombre del archivo entre otra información útil.&lt;/p&gt;
&lt;p&gt;Las siguientes cinco advertencias están relacionadas con el hecho de que las declaraciones de &amp;ldquo;uso&amp;rdquo; deben estar dentro del espacio de nombres y no afuera, como dice la plantilla. La solución es obvia, simplemente mover las declaraciones dentro del espacio de nombres.&lt;/p&gt;
&lt;p&gt;Las siguientes cuatro advertencias están relacionadas con la falta de documentación en los diferentes instrumentos de código: clases y métodos en este caso. Una vez que se agrega la documentación, las advertencias desaparecen.&lt;/p&gt;
&lt;p&gt;La figura 4 muestra el resultado de la compilación después de aplicar las correcciones anteriores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/04.png&#34; alt=&#34;Segundos resultados de compilación&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 4.&lt;/p&gt;
&lt;p&gt;Observe las dos nuevas advertencias. En este punto es bueno mencionar que este es un procedimiento iterativo hasta la meta (0 errores, 0 advertencias, 0 mensajes). También se eliminaron las declaraciones de &amp;ldquo;uso&amp;rdquo; no utilizadas (las que están en gris). La figura 5 muestra el nuevo resultado una vez que arreglamos estas dos advertencias agregando el modificador &amp;ldquo;público&amp;rdquo; a la clase y al método.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/05.png&#34; alt=&#34;Primeros arreglos&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 5.&lt;/p&gt;
&lt;p&gt;¡Hurra! ¡Lo hicimos! Pero (siempre hay un pero, ¿no?), Esto es posible gracias al conjunto de reglas que hemos configurado en el proyecto para reportar advertencias. Entonces, seamos más exigentes al cambiar el conjunto de reglas.&lt;/p&gt;
&lt;p&gt;La figura 6 muestra las propiedades del proyecto en la opción &amp;ldquo;Análisis de código&amp;rdquo;. Observe la casilla de verificación no seleccionada: &amp;ldquo;Habilitar análisis de código al compilar&amp;rdquo; y las &amp;ldquo;Reglas recomendadas administradas por Microsoft&amp;rdquo; en el menú desplegable Conjunto de reglas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/06.png&#34; alt=&#34;Opciones de configuración del proyecto&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 6.&lt;/p&gt;
&lt;p&gt;Si habilita la casilla de verificación sin instalar el paquete NuGet, no recibirá ninguna advertencia y si también cambia el conjunto de reglas sin instalar el paquete NuGet, recibirá solo 2 advertencias también devueltas por el paquete StyleCop porque lo que hace es agregar muchas más reglas al conjunto de trabajo. Esa es la razón por la que me encanta agregarlo a mis proyectos y no solo usar lo que está incluido en Visual Studio.&lt;/p&gt;
&lt;p&gt;La figura 7 muestra las opciones recomendadas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/07.png&#34; alt=&#34;Opciones recomendadas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 7.&lt;/p&gt;
&lt;p&gt;Sí, &amp;ldquo;Microsoft All Rules&amp;rdquo;, más estrictos somos, mejor código obtenemos si seguimos los criterios para obtener al final 0 errores, 0 advertencias y 0 mensajes.&lt;/p&gt;
&lt;p&gt;La figura 8 muestra los resultados de la compilación después de las nuevas opciones para el análisis de código.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/08.png&#34; alt=&#34;Terceros resultados de compilación&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 8.&lt;/p&gt;
&lt;p&gt;Seis nuevas advertencias, es hora de empezar de nuevo. Uhmmm&amp;hellip; Los dos primeros no tienen un archivo asociado, ¿cómo puedo solucionarlos? Bueno, hay una solución. Haga clic derecho en el código &amp;ldquo;CA2210&amp;rdquo; en este caso, seleccione la opción de &amp;ldquo;Suprimir&amp;rdquo; y luego la opción &amp;ldquo;En Archivo de Supresión&amp;rdquo; como se muestra en La figura 9.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/09.png&#34; alt=&#34;Opciones de reglas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 9.&lt;/p&gt;
&lt;p&gt;Una vez seleccionada esta opción, se crea un nuevo archivo llamado &amp;ldquo;GlobalSuppressions.cs&amp;rdquo; en la raíz del proyecto como se muestra en La figura 10.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/10.png&#34; alt=&#34;Archivo de supresión de reglas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 10.&lt;/p&gt;
&lt;p&gt;En este punto, me gustaría mencionar que hay ocasiones en las que puede suprimir la advertencia en el archivo de supresión y otras directamente en el código fuente. En La figura 10 todavía hay 5 advertencias más para corregir. Mis opciones son suprimir en el archivo de supresión global la primera advertencia y suprimir en el código fuente la cuarta advertencia. Para suprimir el código fuente, debe hacer casi lo mismo: haga clic con el botón derecho en el código de la advertencia, seleccione la opción &amp;ldquo;Supresión&amp;rdquo; y luego seleccione la opción &amp;ldquo;En fuente&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Esta opción agrega un atributo sobre el método que se informa que contiene el código para suprimir la advertencia, similar al código agregado en el archivo &amp;ldquo;GlobalSuppressions.cs&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;La segunda advertencia se puede arreglar marcando el método &amp;ldquo;Principal&amp;rdquo; como &amp;ldquo;estático&amp;rdquo;; mientras que el tercero se puede arreglar eliminando el parámetro &amp;ldquo;args&amp;rdquo; (y su documentación en los comentarios del método). Finalmente, la quinta advertencia se puede arreglar simplemente corrigiendo la ortografía de la palabra. Sí, StyleCop también incluye corrección ortográfica, ¿no es genial?&lt;/p&gt;
&lt;p&gt;Una vez que se abordan todas las advertencias restantes, podemos volver a compilar y ver lo que se informa esta vez, La figura 11 muestra eso.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/11.png&#34; alt=&#34;Cuartos resultados de compilación&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 11.&lt;/p&gt;
&lt;p&gt;¿Qué? ¿Más advertencias? Sí, recuerde que agregó un nuevo archivo: &amp;ldquo;GlobalSuppressions.cs&amp;rdquo; y ese archivo ingresa al ciclo para reportar advertencias de compilación también. Entonces, es hora de corregir las nuevas advertencias informadas.&lt;/p&gt;
&lt;p&gt;Todas las supresiones a través del código (código fuente del archivo &amp;ldquo;GlobalSuppressions.cs&amp;rdquo; o atributos en los instrumentos de código) deben tener una justificación. Utilizo mis iniciales como justificación como una forma de rastrear quién decidió suprimir esta advertencia. Así es como soluciono la primera y tercera advertencias.&lt;/p&gt;
&lt;p&gt;La segunda advertencia se puede corregir agregando el encabezado al archivo &amp;ldquo;GlobalSuppressions.cs&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;La cuarta advertencia solicita el uso de &amp;ldquo;////&amp;rdquo; en lugar de &amp;ldquo;//&amp;rdquo; para iniciar un comentario de código fuente. Si no le gusta esta opción, puede suprimir globalmente en el archivo &amp;ldquo;GlobalSuppressions.cs&amp;rdquo;, pero prefiero corregirlo cambiando la forma en que escribo los comentarios.&lt;/p&gt;
&lt;p&gt;Finalmente, La figura 12 muestra cómo se ve el código al final.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/stylecop-coding-style/12.png&#34; alt=&#34;Código final&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 12.&lt;/p&gt;
&lt;p&gt;Primero que se cumpla todo nuestro objetivo: 0 errores, 0 advertencias y 0 mensajes. En segundo lugar, nuestro código resultante es atractivo y se explica por sí mismo para futuras modificaciones, así como menos problemas reportados por otras herramientas de análisis de seguridad como HP Fortify.&lt;/p&gt;
&lt;p&gt;Es válido mencionar que debido a que esta disciplina requiere agregar comentarios en todos los instrumentos escribir todos esos comentarios manualmente es una tarea tediosa. Por esa razón también utilizo otra herramienta llamada &amp;ldquo;GhostDoc&amp;rdquo; que genera documentación muy precisa dependiendo del contexto del instrumento que se está documentando. El problema con esto es que debe hacerse uno por uno debido a la limitación de la licencia. En realidad, yo uso la versión gratuita, pero la licencia profesional permite generar comentarios para toda una clase, archivo o espacio de nombres con un solo clic o presionando &amp;ldquo;Shift + Ctrl + D&amp;rdquo; sobre el instrumento. La buena noticia es que recientemente &amp;ldquo;GhostDoc&amp;rdquo; distribuyó una versión usando el paquete de extensión de Visual Studio y no la aplicación independiente como estaba, por lo que la instalación y las actualizaciones se vuelven más fáciles.&lt;/p&gt;
&lt;p&gt;Una vez más esta es mi experiencia creando códigos fuentes. Sé que seguir esta disciplina no tiene gracia si el producto no es nuevo pero como dice Robert C. Martin: &amp;ldquo;… no importa el estado de un proyecto, pero cualquier cosa que cambies trata de hacer tu mejor esfuerzo…&amp;rdquo; para mí eso significa no generar nuevas advertencias. Al final, piense siempre que el desarrollador que le toque el código en el futuro podría ser un asesino en serie y conoce su dirección (también cita de Robert C. Martin), así que es mejor dejar el código lo más limpio posible.&lt;/p&gt;
&lt;p&gt;Todos esto comenzó con una pregunta de ReSharper y terminará con un comentario relacionado con ReSharper. A veces, las advertencias informadas por StyleCop y las informadas por ReSharper entran en conflicto entre ellas. Yo suelo dar prioridad a los reportados por StyleCop porque creo que son más estrictos y compatibles con más herramientas. Además, no hay dinero asociado porque es gratis mientras que ReSharper no lo es.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Bienvenida</title>
      <link>/es/post/bienvenida/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/es/post/bienvenida/</guid>
      
        <description>&lt;p&gt;Les doy la bienvenida oficial a mi blog profesional, intentaré escribir frecuentemente sobre tecnologías de desarrollo, lenguajes de programación, estructuras de datos, algoritmos, entre otros temas vinculados con este increíble mundo tecnológico expresando siempre mis opiniones personales.&lt;/p&gt;
&lt;p&gt;Me decidí gracias a que sentí la necesidad imperiosa de escribir luego de acumular experiencia desarrollando software y constantemente explicar una y otra vez los conceptos, enfoques, y soluciones aplicados; unido a la recomendación de Scott Hanselman de escribir un artículo de todo aquello que no pueda ser explicado en seis oraciones.&lt;/p&gt;
&lt;p&gt;La mayoría de los artículos estarán también traducidos al inglés. Espero poder servir de ayuda a personas hablantes de ambos idiomas.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Memorias</title>
      <link>/es/post/memorias/</link>
      <pubDate>Thu, 31 Dec 2020 23:59:00 +0000</pubDate>
      
      <guid>/es/post/memorias/</guid>
      
        <description>&lt;p&gt;Esta primera entrada es para listar todos los artículos previamente publicados en un antiguo blog que inicié en el 2006 cuando era profesor de la Universidad de Ciego de Ávila. Volviendo a leerlos, noto mucha ingenuidad, e imprecisiones pero quiero recordar que en aquel entonces mi acceso a Internet era muy limitado y mi experiencia profesional apenas comenzaba.&lt;/p&gt;
&lt;p&gt;Creo que hay muchas cosas que siguen siendo válidas hoy en día y pueden servir de ayuda todavía.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../recuperaci%C3%B3n-de-xml&#34;&gt;Recuperar XML desde Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../generaci%C3%B3n-de-xml&#34;&gt;Generar XML desde Delphi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../consideraciones-de-implementaci%C3%B3n&#34;&gt;Algunas consideraciones de Implementación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../consideraciones-de-dise%C3%B1o&#34;&gt;Algunas consideraciones de Diseño&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../gobierno-electr%C3%B3nico&#34;&gt;Gobierno electrónico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../confianza-en-internet&#34;&gt;¿Se puede confiar ciegamente en Internet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../isfuros-2006&#34;&gt;ISFUROS 2006&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../poni%C3%A9ndonos-al-d%C3%ADa&#34;&gt;Poniéndome al día&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../amaos-todos&#34;&gt;Amaos los unos a los otros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../reescribir-%C3%B3-reusar&#34;&gt;La delgada línea entre reescribir y reutilizar código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../futuro-del-ensamblador&#34;&gt;El futuro del Ensamblador&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../fanatismos&#34;&gt;Fanatismos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../herramientas-para-blogs&#34;&gt;Herramientas para los blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../borland&#34;&gt;Borland Co.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../superaci%C3%B3n-personal&#34;&gt;Aspectos tener en cuenta a la hora de valorar el uso de Internet en la superación profesional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../programaci%C3%B3n-elegante&#34;&gt;La elegancia de la programación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../solo-desplegar-no-basta&#34;&gt;No basta con solo construir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../objetos-duros-objetos-blandos&#34;&gt;Objetos ‘duros’ y ‘blandos’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../encapsulamiento-vs-c%C3%B3digo-abierto&#34;&gt;Encapsulamiento vs. Código Abierto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../profesionales-de-la-computaci%C3%B3n&#34;&gt;¿Quién es quién en los profesionales de la computación?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cibern%C3%A9ticos-como-ingenieros&#34;&gt;¿Cibernéticos como Ingenieros?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../validaci%C3%B3n-de-datos&#34;&gt;Validación en el cliente o en el servidor: ¿Llegó .NET? ¡Se acabaron las preocupaciones!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../apuntes-ingenier%C3%ADa-software&#34;&gt;Apuntes sobre la importancia de la Ingeniería de Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Recuperar XML desde Delphi</title>
      <link>/es/post/recuperaci%C3%B3n-de-xml/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/recuperaci%C3%B3n-de-xml/</guid>
      
        <description>&lt;p&gt;En un artículo anterior vimos una solución a la generación de XML (Lenguaje de Marcas Extendido, siglas en inglés) desde el ambiente de desarrollo Borland Delphi; en este veremos como podemos capturar y utilizar dicho XML para otros usos.&lt;/p&gt;
&lt;p&gt;Para ello nos remitiremos a la misma agencia noticiosa deportiva en la cual nos basamos anteriormente, donde se pretendía cubrir las diferentes competiciones de un evento enviando las noticias y resultados a través de una aplicación diseñada por sus programadores. Si bien habíamos enfocado el problema desde el punto de vista de los reporteros (en este caso los clientes), ahora lo haremos desde el punto de vista servidor.&lt;/p&gt;
&lt;p&gt;Los programadores de dicha agencia decidieron que una vez enviadas las noticias y/o resultados (correos) a la agencia, tendría que haber una aplicación que se encargara de procesarlos para mostrar los datos que de ellos provenían en su sitio web. Dicha aplicación no fue más que un servicio de Windows (o daemon en Linux).&lt;/p&gt;
&lt;p&gt;Dicho servicio se encargaba cada un tiempo determinado de revisar todos los correos que habían llegado a una cuenta específica creada al efecto. Una vez obtenidos los correos eran procesados uno a uno para extraerle la información útil y guardarla primeramente en un fichero independiente y luego en la base de datos de la cual se nutre el sitio web. Para ello se confeccionó un componente ActiveX utilizando la tecnología Windows Script Component que brindaba entre sus métodos las facilidades para las inserciones pertinentes.&lt;/p&gt;
&lt;p&gt;Analicemos entonces el código fuente de este componente script (safedata.wsc):&lt;/p&gt;
&lt;p&gt;Primeramente se da la descripción general del componente: comentarios, descripción, versión, progid, etc.; luego se describen los métodos con sus respectivos parámetros que el mismo exporta: GetDataID, ReplaceDataID, CleanData y ProccessData. Por último se expone la implementación de estos métodos en el lenguaje especificado (en este caso Java Script).&lt;/p&gt;
&lt;p&gt;Como se puede observar en la figura 1 tanto las etapas, los centros y atletas participantes, como los deportes llegan al servicio con sus nombres y no con sus respectivos identificadores, por lo que antes de tomar los datos para insertarlos en la base de datos, deben ser transformados; esto se logra a través de la llamada al método CleanData pasándole como parámetros el nombre del fichero XML con los datos y el DSN (Nombre de la Fuente de Datos, siglas en inglés).&lt;/p&gt;
&lt;p&gt;Una vez acomodados los datos no falta más que llamar al método ProccessData pasándole el nombre del fichero XML de los datos, el del XSL (Lenguaje de Estilos Extendidos, siglas en inglés) que es el que se encargará de generar las consultas de inserción en la base de datos que referencia el DSN como tercer parámetro. Con esto no hace más que abrir el fichero XML, transformarlo con el XLS y luego ir iterando y ejecutando cada una de las consultas generadas por dicha transformación haciendo uso del XML DOM (Modelo de Objetos del Documento, siglas en inglés).&lt;/p&gt;
&lt;p&gt;Entonces el código que haría falta a la hora de procesar cada correo sería:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;procedure TService1.ProcessMessage;

  var
    Safe : OleVariant;
    …

  begin
    …
    Safe := CreateOleObject(&amp;#39;redway.safedata&amp;#39;);
    Safe.CleanData(&amp;#39;DSN=EventoX&amp;#39;, &amp;#39;informaciones.xml&amp;#39;);
    Safe.ProccessData(&amp;#39;informaciones.xml&amp;#39;, &amp;#39;informaciones.xsl&amp;#39;, &amp;#39;DSN=EventoX&amp;#39;);
    …
  end;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Por supuesto que el cuerpo del correo que se está analizando debió ser salvado a priori en un fichero externo llamado “informaciones.xml” y debe existir un DSN de sistema llamado “EventoX” que referencie la base de datos del sitio web. Ver algunas de las relaciones de la base de datos en la figura 4&lt;/p&gt;
&lt;p&gt;Solo resta aclarar que debe existir un fichero llamado “informaciones.xsl” que contenga las transformaciones a los datos (ver en la figura 2). Se tienen apenas dos transformaciones: una para las noticias y otra para el deporte baloncesto, se deberán tener tantas como de deportes se quiera brindar datos. Si a los datos expresados en el XML de la figura 1 los hubiésemos transformado con el XSL de la figura 2 hubiésemos tenido como resultado el XML de la figura 3.&lt;/p&gt;
&lt;p&gt;No es objetivo de este artículo el cómo fueron trabajados los correos (para lo cual se utilizó también los componentes Indy) ni las transformaciones de los datos, ni la exhaustiva seguridad que debe tener un sistema como el tomado de referencia. Para concluir le informamos que el ejemplo expuesto aquí se utilizó como parte también del sistema noticioso de la V Universiada Nacional celebrada en las provincias Villa Clara y Sancti Spiritus en abril del 2001 con resultados muy favorables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;informaciones&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;baloncesto&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dia&amp;gt;&lt;/span&gt;21&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dia&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;sexo&amp;gt;&lt;/span&gt;M&lt;span class=&#34;nt&#34;&gt;&amp;lt;/sexo&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;etapa&amp;gt;&lt;/span&gt;Clasificatoria&lt;span class=&#34;nt&#34;&gt;&amp;lt;/etapa&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipos&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipo&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;centro&amp;gt;&lt;/span&gt;UCLV&lt;span class=&#34;nt&#34;&gt;&amp;lt;/centro&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;puntuacion&amp;gt;&lt;/span&gt;85&lt;span class=&#34;nt&#34;&gt;&amp;lt;/puntuacion&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipo&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipo&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;centro&amp;gt;&lt;/span&gt;UHO&lt;span class=&#34;nt&#34;&gt;&amp;lt;/centro&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;puntuacion&amp;gt;&lt;/span&gt;76&lt;span class=&#34;nt&#34;&gt;&amp;lt;/puntuacion&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipo&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipos&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;lanotador&amp;gt;&lt;/span&gt;Orlando Abreu Rojas&lt;span class=&#34;nt&#34;&gt;&amp;lt;/lanotador&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;ldefensivo&amp;gt;&lt;/span&gt;Michael Hernández Martínez&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ldefensivo&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/baloncesto&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;noticia&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dia&amp;gt;&lt;/span&gt;25&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dia&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;deporte&amp;gt;&lt;/span&gt;Todos&lt;span class=&#34;nt&#34;&gt;&amp;lt;/deporte&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;titular&amp;gt;&lt;/span&gt;Adiós, adiós&lt;span class=&#34;nt&#34;&gt;&amp;lt;/titular&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;cuerpo&amp;gt;&lt;/span&gt;
      Hoy se cierran las puertas luego de varios días de intensas y emocionantes jornadas. Los
      resultados preliminares permiten concluir en que ha sido un exitoso evento caracterizado
      por la excelente organización, la disciplina, el alto espíritu deportivo y la lucha por
      defender dignamente el nombre y la bandera de cada centro participante.
      Si se ha cumplido previsto, ello ha sido posible por la decisiva contribución de los
      participantes, en particular de los atletas...
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/cuerpo&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;resumen&amp;gt;&lt;/span&gt;
      Llega el final de esta competición y con él las notas de despedida...
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/resumen&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/noticia&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/informaciones&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Figura 1: Ejemplo de XML generado.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/TR/WD-xsl&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;match=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;sqls&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;informaciones/baloncesto&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;informaciones/noticia&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/sqls&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;  
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;match=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;baloncesto&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
      INSERT INTO tbBaloncesto VALUES (
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dia&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sexo&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;etapa&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;equipos/equipo[0]/centro&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;equipos/equipo[0]/puntuacion&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;equipos/equipo[1]/centro&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;equipos/equipo[1]/puntuacion&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lanotador&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ldefensivo&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;
      )
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;match=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;noticia&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
      INSERT INTO tbNoticias VALUES (
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dia&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;deporte&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;titular&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cuerpo&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;,
        &amp;#39;&lt;span class=&#34;nt&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;select=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;resumen&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#39;
      )
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Figura 2: Transfomaciones a los datos (informaciones.xsl).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;sqls&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
    INSERT INTO tbBaloncesto VALUES (21, &amp;#39;M&amp;#39;, &amp;#39;Clasificatoria&amp;#39;, &amp;#39;UCLV&amp;#39;, 85, &amp;#39;UHO&amp;#39;, 76, &amp;#39;Orlando Abreu Rojas&amp;#39;, &amp;#39;Michael Hernández Martínez&amp;#39;)
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;sql&amp;gt;&lt;/span&gt;
    INSERT INTO tbNoticias VALUES (25, &amp;#39;Todos&amp;#39;, &amp;#39;Adiós, adiós&amp;#39;, &amp;#39;Hoy se cierran las puertas luego de varios días de intensas y emocionantes jornadas...&amp;#39;)
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/sqls&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Figura 3: Resultado de las transformaciones a los datos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/xml-recovery/04.jpg&#34; alt=&#34;Relaciones de las tablas en la base de datos&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 4: Algunas relaciones de las tablas en la base de datos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;package&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;cp&#34;&gt;&amp;lt;?component error=&amp;#34;true&amp;#34; debug=&amp;#34;true&amp;#34;?&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;comment&amp;gt;&lt;/span&gt;
    Componente auxiliar para la transferencia de datos en XML a una base de datos
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/comment&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;safedata&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;registration&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;progid=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;redway.safedata&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;description=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Transfiere los datos en XML a una base de datos&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;public&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;method&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GetDataID&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DSN&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Table&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;IndexField&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ValueField&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/method&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;method&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ReplaceDataID&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DSN&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Table&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;IndexField&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ValueField&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Pattern&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;XMLDOM&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/method&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;method&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CleanData&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;XML&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DSN&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/method&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;method&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ProccessData&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;XML&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;XSL&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameter&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DSN&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/method&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/public&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;language=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;JScript&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;cp&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        function GetDataID(DSN, Table, IndexField, ValueField, Value)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var RecordSet = new ActiveXObject(&amp;#34;ADODB.Recordset&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RecordSet.CursorType = 3;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RecordSet.LockType = 3;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var result = -1;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var SQL = &amp;#34;SELECT &amp;#34; + IndexField + &amp;#34; FROM &amp;#34; + Table + &amp;#34;WHERE (&amp;#34;+ValueField+&amp;#34;=&amp;#39;&amp;#34;+Value + &amp;#34;&amp;#39;)&amp;#34;;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RecordSet.Open(SQL, DSN);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            if(RecordSet.EoF == false)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                result = RecordSet.Fields.Item(0).Value
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RecordSet.Close();
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RecordSet = null;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            return result;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        function ReplaceDataID(DSN, Table, IndexField, ValueField, Pattern, XMLDOM)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            NodeList = XMLDOM.getElementsByTagName(Pattern);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            for(i = 0; i &amp;lt; NodeList.length; i++)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                ID = GetDataID(DSN, Table, IndexField, ValueField, NodeList.item(i).text);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                if(ID != -1)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                    NodeList.item(i).text = ID
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                  else
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                    return(-1);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            return(0);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        function CleanData(XML, DSN)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var XMLDOM = new ActiveXObject(&amp;#34;Microsoft.XMLDOM&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM.async = false;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM.load(XML);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            if(
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;               (ReplaceDataID(DSN, &amp;#34;tbEtapas&amp;#34;, &amp;#34;ID&amp;#34;, &amp;#34;descripcion&amp;#34;, &amp;#34;etapa&amp;#34;, XMLDOM) == -1) ||
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;               (ReplaceDataID(DSN, &amp;#34;tbEquipos&amp;#34;, &amp;#34;ID&amp;#34;, &amp;#34;abreviatura&amp;#34;, &amp;#34;centro&amp;#34;, XMLDOM) == -1) ||
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;               (ReplaceDataID(DSN, &amp;#34;tbAtletas&amp;#34;, &amp;#34;ID&amp;#34;, &amp;#34;nombre&amp;#34;, &amp;#34;lanotador&amp;#34;, XMLDOM) == -1) ||
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;               (ReplaceDataID(DSN, &amp;#34;tbAtletas&amp;#34;, &amp;#34;ID&amp;#34;, &amp;#34;nombre&amp;#34;, &amp;#34;ldefensivo&amp;#34;, XMLDOM) == -1) ||
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;               (ReplaceDataID(DSN, &amp;#34;tbDeportes&amp;#34;, &amp;#34;ID&amp;#34;, &amp;#34;nombre&amp;#34;, &amp;#34;deporte&amp;#34;, XMLDOM) == -1)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              )
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                return(-1)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              else
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                XMLDOM.save(XML);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                return(0);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        function ProccessData(XML, XSL, DSN)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          {
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var XMLDOM = new ActiveXObject(&amp;#34;Microsoft.XMLDOM&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM.async = false;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM.load(XML);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var XSLDOM = new ActiveXObject(&amp;#34;Microsoft.XMLDOM&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XSLDOM.async = false;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XSLDOM.load(XSL);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var RESDOM = new ActiveXObject(&amp;#34;Microsoft.XMLDOM&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RESDOM.async = false;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM.transformNodeToObject(XSLDOM, RESDOM);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var Connection = new ActiveXObject(&amp;#34;ADODB.Connection&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            Connection.Open(DSN);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            var SQLS = RESDOM.getElementsByTagName(&amp;#34;sql&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            for(i = 0; i &amp;lt; SQLS.length; i++)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;              Connection.Execute(SQLS.item(i).text);
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            Connection.Close();
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            Connection = null;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            RESDOM = null;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XSLDOM = null;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            XMLDOM = null;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;          }
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;      ]]&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/package&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Listado 1: Código fuente del componente script (safedata.wsc).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Generar XML desde Delphi</title>
      <link>/es/post/generaci%C3%B3n-de-xml/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/generaci%C3%B3n-de-xml/</guid>
      
        <description>&lt;p&gt;En números anteriores de esta revista salió un artículo acerca de cómo generar XML (Lenguaje de Marcas Extendido –siglas en inglés) proveniente de una forma de HTML (Lenguaje de Marcado de Hipertexto –siglas en inglés) desde ASP (Active Server Pages) con la ayuda del objeto del sistema de ficheros (FileSystemObject). En este artículo veremos cómo hacerlo desde Delphi aprovechando algunas de las incontables ventajas de este ambiente de desarrollo.&lt;/p&gt;
&lt;p&gt;Recordemos primeramente que XML es un subconjunto de SGML (Lenguaje de Marcado Generalizado Estándar) y más que un simple lenguaje de marcas como su nombre sugiere es un meta-lenguaje que nos permite definir lenguajes de marcado adecuados a usos determinados y que está llamado a ser el nuevo ASCII debido a su fácil confección, transmisión y comprensión.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;baloncesto&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;dia&amp;gt;&lt;/span&gt;21&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dia&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;sexo&amp;gt;&lt;/span&gt;M&lt;span class=&#34;nt&#34;&gt;&amp;lt;/sexo&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;etapa&amp;gt;&lt;/span&gt;Clasificatoria&lt;span class=&#34;nt&#34;&gt;&amp;lt;/etapa&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipos&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipo&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;centro&amp;gt;&lt;/span&gt;UCLV&lt;span class=&#34;nt&#34;&gt;&amp;lt;/centro&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;puntuacion&amp;gt;&lt;/span&gt;85&lt;span class=&#34;nt&#34;&gt;&amp;lt;/puntuacion&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipo&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;equipo&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;centro&amp;gt;&lt;/span&gt;UHO&lt;span class=&#34;nt&#34;&gt;&amp;lt;/centro&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;lt;puntuacion&amp;gt;&lt;/span&gt;76&lt;span class=&#34;nt&#34;&gt;&amp;lt;/puntuacion&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipo&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/equipos&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;lanotador&amp;gt;&lt;/span&gt;Orlando Abreu Rojas&lt;span class=&#34;nt&#34;&gt;&amp;lt;/lanotador&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;ldefensivo&amp;gt;&lt;/span&gt;Michael Hernández Martínez&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ldefensivo&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/baloncesto&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Figura 1: Ejemplo de XML.&lt;/p&gt;
&lt;p&gt;Nos remitiremos a un ejemplo a grandes rasgos para ver cómo funciona en la práctica. Supongamos que una agencia noticiosa deportiva, se comprometió a brindar como servicio de su sitio web en Internet, todos los pormenores de una competición X cualquiera. La misma tiene reporteros en todos los eventos programados encargados de hacer llegar los detalles.&lt;/p&gt;
&lt;p&gt;Pues bien, los programadores de dicha agencia luego de deliberar mucho acerca de cómo hacerlo, llegaron a la conclusión de que lo ideal sería hacer una aplicación que recogiera los datos pertinentes, los cuales pueden ser tanto noticias y entrevistas; como estadísticas y resultados de eventos en sí para el repositorio de artículos y tablas resúmenes respectivamente. Los mismos irían a parar al centro de comunicaciones a través del correo electrónico (buena elección si no se posee plena conexión a Internet) donde una vez allí, un servicio creado a la espera de dichos correos los haría guardarse en la base de datos de la cual se nutre el sitio web de la agencia.&lt;/p&gt;
&lt;p&gt;Dicha aplicación fue implementada en Borland Delphi 6 y consiste en un conjunto de formas MDI que se acceden por menús (ver figura 2) donde cada una representa un modelo de resultado y/o noticia (ver figuras 3 y 4 respectivamente). Para no perder tiempo en la confección de la misma decidieron reutilizar tanto código como pudiesen. Para ello hicieron un módulo (unit) con una función cuya tarea es generar el XML de los datos partiendo de ciertas características de los componentes dispuestos en las formas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/xml-generation/02.jpg&#34; alt=&#34;Menús de aplicación&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 2: Menús de la aplicación.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/xml-generation/03.jpg&#34; alt=&#34;Forma captadora de resultados&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 3: Forma captadora de resultados (en este caso un partido de baloncesto) y generadora del XML de la figura 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/xml-generation/04.jpg&#34; alt=&#34;Forma captadora de noticias&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figura 4: Forma captadora de noticias.&lt;/p&gt;
&lt;p&gt;Según esta función basta con esparcir componentes y ajustarles ciertas propiedades, la propiedad Name corresponderá con el nombre de la etiqueta del XML y la propiedad Tag indicará el orden en el que serán tomados los componentes para la generación de sus respectivas etiquetas de XML. Cuando se quiera no tomar en cuenta algunos componentes bastará con dejarle su Tag con valor 0 (el por defecto). Podrá haber componentes con el mismo orden de prioridad sin que dejen de incluirse solo que indistintamente podrá procesarse uno primero o después; esto solo es importante a la hora de generar listas de etiquetas con un mismo nivel de profundidad. La lista de propiedades Tag no tiene por qué ser consecutiva, es decir, se podrán omitir números sin que se afecte el resultado. Los Paneles agrupan dentro de sí otros componentes al igual que los GroupBoxs agrupan dentro de sí listas de etiquetas.&lt;/p&gt;
&lt;p&gt;En la figura 3 se colocó un Panel llamado “baloncesto” que agrupa todos los componentes que generarán etiquetas XML en orden (según propiedad Tag): el Edit “dia”, el ComboBox “sexo”, el ComboBox “etapa” y el Panel “equipos”, el ComboBox “lanotador” (líder anotador del partido) y el ComboBox “ldefensivo” (el más destacado en la defensa). A su vez dentro del Panel “equipos” se dispuso un GroupBox llamado “equipo” que agrupa un ListBox “centro” y un ListBox “puntuacion” estos con el mismo orden de prioridad (propiedad Tag, 1) ya que son listas que tienen (según el XML deseado) que estar al mismo nivel. Los botones: “Adicionar”, “Eliminar”, “Generar” y “Enviar” y el Memo en este caso no generarán XML por lo que se les dejó su Tag como 0.&lt;/p&gt;
&lt;p&gt;Analicemos el código fuente de la unit “UMyXML”. En la inicialización del mismo se crea y da valores iniciales a una lista de cadenas (ClassNames) donde cada una de ellas corresponderá con una de las clases que al ser procesadas generarán etiquetas XML, no se incluyeron todas las clases de la VCL (Biblioteca de Componentes Visuales, siglas en inglés) porque solo se trabajará con este reducido número de ellas, es decir: (GroupBoxs, Paneles, Edits, ComboBoxs, SpinEdits, ListBoxs y Memos). A la única función que exporta (GenMyXML) se le pasa un control cualquiera que será el inicial para generar el XML. Luego este control es pasado a la función GetMyXML donde la misma es la encargada de obtenerle todos sus componentes y de ellos generar el XML según corresponda. Es precisamente en esta última función, donde en dependencia de la clase del componente que se le pase, se generará su etiqueta XML.&lt;/p&gt;
&lt;p&gt;Entonces, cuando se presione el botón “Generar” lo que se hace además de todas las validaciones pertinentes: si el día está en el rango válido, si hay solo dos equipos con sus respectivas puntuaciones, etc.; es llamar a GenMyXML pasándole la forma en cuestión como el control inicial a ser procesado.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;procedure TBaloncestoForm.GenerarClick(Sender : TObject);

var
  XML : string;
  …

begin
  …// Validaciones
  XML := GenMyXML(Self);
  TotalXML := TotalXML + XML;
  …// Procesar XML para su visualización
end;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;El proceso es análogo para todas las formas ya que GenMyXML es genérico y es precisamente esta característica fundamental la que hizo que se ahorrara un considerable tiempo de desarrollo. TotalXML es una variable común a todas las formas donde quedará el XML resultado de todas las informaciones captadas por el reportero con el fin de enviar solo un correo con todos los datos posibles. La aplicación sería acompañada de una base de datos con las tablas correspondientes a los centros que competirán, los deportistas, etc., para de ahí tomar dichos datos según le haga falta (ejemplo: líder anotador, destacado en la defensa, etapa, etc.). Una vez generado el XML solo restaría enviarlo a la agencia, esto se logra usando la opción “Enviar” del menú principal, la cual tendría una rutina asociada como la siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;procedure TMainForm.Enviar1Click(Sender : TObject);
  
  var
    Mail : TIdMessage;

  begin
    …
    Mail.Body.Add(&amp;#39;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt;&amp;#39;);
    Mail.Body.Add(&amp;#39;&amp;lt;informaciones&amp;gt;&amp;#39;);
    Mail.Body.Add(TotalXML);
    Mail.Body.Add(&amp;#39;&amp;lt;/informaciones&amp;gt;&amp;#39;);
    …
  end;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Solo se puso parte de la rutina pues no es objetivo de este artículo enviar los correos; para lo cual se utilizaron los componentes Indy que vienen también con Kylix aunque también hay versiones para C++ Builder 4 y 5 y Delphi 5. Para concluir le informamos que el ejemplo expuesto aquí se utilizó como parte del sistema noticioso de la V Universiada Nacional celebrada en las provincias Villa Clara y Sancti Spiritus en abril del 2001 con resultados muy favorables. En un próximo artículo veremos cómo recuperar el XML de los correos y guardarlos en la base de datos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;unit UMyXML;

interface

uses Controls;

function GenMyXML(const WinControl : TWinControl) : string;

implementation

uses
  StdCtrls, ExtCtrls, Spin, Classes;

var
  ClassNames : TStringList;

function GetMyXML(const WinControl : TWinControl; const Parent : string) : string;

  var
    i, j : integer;
    List : TList;

  function GetMaxControlNumber : integer;

    var i : integer;

    begin
      result := 0;
      for i := 0 to WinControl.ControlCount - 1 do
        if WinControl.Controls[i].Tag &amp;gt; result
          then result := WinControl.controls[i].Tag;
    end;

  procedure GetControls(const ControlNumber : integer; List : TList);

    var i : integer;

    begin
      List.Clear;
      for i := 0 to WinControl.ControlCount - 1 do
        if WinControl.Controls[i].Tag = ControlNumber
          then List.Add(WinControl.Controls[i]);
    end;

  function GetXMLTag(const List : TList; const Parent : string) : string;

    var
      i, j, index : integer;
      Items       : array of integer;
      obj         : TWinControl;
      flag        : boolean;

    begin
       result := &amp;#39;&amp;#39;;
       if (List &amp;lt;&amp;gt; nil) and (List.Count &amp;gt; 0)
         then
           begin
             SetLength(Items, List.Count);
             flag := false;
             while not flag do
               begin
                 flag := true;
                 if Parent &amp;lt;&amp;gt; &amp;#39;&amp;#39;
                   then result := result + &amp;#39;&amp;lt;&amp;#39; + Parent + &amp;#39;&amp;gt;&amp;#39;;
                 for i := 0 to List.Count -  1 do
                   begin
                     obj := TWinControl(List[i]);
                     index := ClassNames.IndexOf(obj.ClassName);
                     if index &amp;gt;= 0
                       then
                         begin
                           if index &amp;gt; 0
                             then result := result + &amp;#39;&amp;lt;&amp;#39; + obj.Name + &amp;#39;&amp;gt;&amp;#39;;
                           case index of
                             0 : result := result + GetMyXML(TGroupBox(obj), obj.Name);
                             1 : result := result + GetMyXML(TPanel(obj), &amp;#39;&amp;#39;);
                             2 : result := result + TEdit(obj).Text;
                             3 : result := result + TComboBox(obj).Text;
                             4 : result := result + TSpinEdit(obj).Text;
                             5 : begin
                                   result := result + TListBox(obj).Items[Items[i]];
                                   if Items[i] &amp;lt; TListBox(obj).Items.Count - 1
                                     then
                                       begin
                                         Inc(Items[i]);
                                         flag := false;
                                       end;
                                 end;
                             6 : begin
                                   for j := 0 to TMemo(obj).Lines.Count - 1 do
                                     result := result + TMemo(obj).Lines.Strings[j] + &amp;#39; &amp;#39;;
                                 end;
                           end;
                         end;
                     if index &amp;gt; 0
                       then result := result + &amp;#39;&amp;lt;/&amp;#39; + obj.Name + &amp;#39;&amp;gt;&amp;#39;;
                   end;
                 if Parent &amp;lt;&amp;gt; &amp;#39;&amp;#39;
                   then result := result + &amp;#39;&amp;lt;/&amp;#39; + Parent + &amp;#39;&amp;gt;&amp;#39;;
               end;
           end;
    end;

  begin
    List := TList.Create;
    j := GetMaxControlNumber;
    for i := 1 to j do
      begin
        GetControls(i, List);
        result := result + GetXMLTag(List, Parent);
      end;
  end;

function GenMyXML(const WinControl : TWinControl) : string;

  begin
    result := GetMyXML(WinControl, &amp;#39;&amp;#39;);
  end;

initialization
  ClassNames := TStringList.Create;
  ClassNames.Add(&amp;#39;TGroupBox&amp;#39;);
  ClassNames.Add(&amp;#39;TPanel&amp;#39;);
  ClassNames.Add(&amp;#39;TEdit&amp;#39;);
  ClassNames.Add(&amp;#39;TComboBox&amp;#39;);
  ClassNames.Add(&amp;#39;TSpinEdit&amp;#39;);
  ClassNames.Add(&amp;#39;TListBox&amp;#39;);
  ClassNames.Add(&amp;#39;TMemo&amp;#39;);

finalization
  ClassNames.Free;
end.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Algunas consideraciones de Implementación</title>
      <link>/es/post/consideraciones-de-implementaci%C3%B3n/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/consideraciones-de-implementaci%C3%B3n/</guid>
      
        <description>&lt;p&gt;Creemos que es necesario comenzar este artículo sugiriendo la introducción de tres técnicas que, si bien no son nuevas, sí constituyen buenas prácticas dentro del desarrollo organizado de software.&lt;/p&gt;
&lt;p&gt;El acoplamiento de módulos, la compilación, la producción de ejecutables, la generación de reportes y la creación y restauración de copias de seguridad en la producción de sistemas informáticos constituyen tareas perfectamente automatizables. Las ventajas que puede traer el uso de esta técnica están estrechamente relacionadas con el tiempo total de desarrollo de los sistemas informáticos. Cuanto menor sea el tiempo que se dedique a este tipo de actividades mayor será el que se pueda invertir en hacer cumplir los requisitos funcionales del sistema. Dentro de los métodos más utilizados en esta técnica están la creación de archivos de ejecución por lotes combinados con los eventos calendariables que brindan los sistemas operativos modernos. FinalBuilder es una de las herramientas que brinda por igual estas facilidades de una forma visual y amena.&lt;/p&gt;
&lt;p&gt;Un CVS (Sistema de Control de Versiones, siglas en inglés) implantado desde el inicio del proceso de desarrollo de software permite que se tenga un rastro exacto del estado del proyecto en cualquier momento del mismo. Permitiendo además que se los programadores puedan trabajar simultáneamente en un mismo fichero de forma segura. CVS es la herramienta más utilizada por los programadores de Linux, mientras que WinCVS, Borland TeamWork y Microsoft Visual Source Safe son las más utilizadas en Windows.&lt;/p&gt;
&lt;p&gt;La tercera técnica que debe tenerse en cuenta es la explotación de una Base de Datos de Errores. En ella se irán reflejando los errores que vayan surgiendo, quién de los miembros lo descubrió, causas que lo originaron, así como quién es el encargado de corregirlo y cómo lo hizo. Cada error debe permanecer abierto (no corregido) hasta una vez no se haya probado su solución. Esta técnica constituye para los desarrolladores una fuente extra de información y experiencia.&lt;/p&gt;
&lt;p&gt;De más está decir que el hecho de implementar un producto informático en un lenguaje y/o ambiente u otro está estrechamente relacionado con las características propias del producto a desarrollar. Por ello es que nos referiremos a tres grandes lenguajes de programación con sus respectivos ambientes de trabajo más comunes que, si bien no son los únicos, sí podemos afirmar que son los más extendidos en nuestro país y en el mundo.&lt;/p&gt;
&lt;h5 id=&#34;object-pascal--delphi&#34;&gt;Object Pascal / Delphi&lt;/h5&gt;
&lt;p&gt;Object Pascal, lógica evolución de Pascal y evangelizado por Borland, será nuestro primer lenguaje. Cuando en 1995 Borland sacó al mercado Delphi 1.0 la comunidad de profesionales de la computación enseguida vio un futuro muy próspero para este ambiente que reemplazaba a los antiguos Turbo con la introducción de un nuevo lenguaje: Object Pascal. Desde su primera versión soportó las características fundamentales del paradigma Orientado a Objetos como son la herencia y el polimorfismo, en versiones posteriores se le incorporarían los soportes para interfaces y meta clases.&lt;/p&gt;
&lt;p&gt;Borland Delphi -nombre oficial de este ambiente de desarrollo- ya va por ocho versiones y en los próximos años verán la luz dos más. Considerada por muchos la mejor herramienta RAD (Desarrollo Rápido de Aplicaciones) no las ha tenido todas consigo en las herramientas CASE (Ingeniería de Software Asistida por Computadora, siglas en inglés) pues no todas generan código Object Pascal de forma nativa, lográndose en la mayoría de los casos solo a través de la instalación de &amp;ldquo;pluggings&amp;rdquo; o extensiones.&lt;/p&gt;
&lt;p&gt;No es difícil de demostrar el hecho de que para Delphi es la herramienta que más componentes se han implementado. Tal vez esto se deba a que son varias las formas de extensión que permite, BPL como propio, pero permite además DLL (Bibliotecas de Enlace Dinámico), COM (Modelo de Objetos de Componentes), DCOM (COM Distribuido, siglas en inglés en todos los casos) y la gran facilidad con que maneja cada una de ellas.&lt;/p&gt;
&lt;p&gt;Los ficheros de configuración INI, el registro de Windows o los modernos XML (Lenguaje Extendido de Marcas, siglas en inglés) son soportados de forma nativa por la biblioteca de clases VCL (Biblioteca de Componentes Visuales, siglas en inglés) que es parte de Delphi.&lt;/p&gt;
&lt;p&gt;Un paso muy importante en la portabilidad de este lenguaje hacia otras plataformas lo dio precisamente Borland cuando en 1995 saca al mercado Kylix. Herramienta RAD que vino a cubrir un espacio vacío en la comunidad de desarrolladores de Linux. Se puede llegar hasta un 90% del total del proyecto sin tener que hacer ninguna modificación. Lamentamos que este potencial se esté perdiendo y Kylix haya sido relegado por Borland a planos secundarios.&lt;/p&gt;
&lt;p&gt;Los costos dependen mucho de la versión que se desee comprar y esta del para qué se quiera la herramienta. Por lo general de una misma versión hay varias ediciones, una para el usuario medio, una para el desarrollador y una para un nivel corporativo (esto es, por supuesto, lo más clásico) que en ese mismo orden van soportando y facilitando el desarrollo de diferentes tipos de aplicaciones en dependencia de su complejidad y composición.&lt;/p&gt;
&lt;h5 id=&#34;c--visual-c&#34;&gt;C++ / Visual C++&lt;/h5&gt;
&lt;p&gt;C++ ó C plus plus es una extensión del C original para soportar el paradigma Orientado a Objetos. Ambientes de desarrollo RAD para este lenguaje son muy variados desde la misma Borland hasta Microsoft. La primera con su serie C++ Builder no ha logrado consolidarse tal como lo hizo con Delphi, mientras que la segunda ha progresado enormemente con su Visual C++ al incorporarlo a la herramienta de desarrollo más completa que existe hasta estos momentos: Visual Studio.&lt;/p&gt;
&lt;p&gt;C++ soporta todas las características de la orientación a objetos excepto las meta clases. La herencia se hace múltiple en vez de simple, las interfaces se logran solo mediante algunos &amp;ldquo;trucos&amp;rdquo; de sintaxis, lo que le quita elegancia al lenguaje, no obstante, sigue siendo elegido para aplicaciones dentro de este paradigma por muchos programadores.&lt;/p&gt;
&lt;p&gt;Desde las primeras implementaciones de las herramientas CASE, estas fueron capaces de generar código para este lenguaje ya que su comunidad lideraba a las demás. Generalización es un tópico que está presente en este lenguaje y el hecho de poder hacer clases genéricas (sin que medie el tipo hasta la pre compilación). Los macros son otra extensión del lenguaje, aunque en estos días tenga más detractores que seguidores (algo similar a la sentencia goto).&lt;/p&gt;
&lt;p&gt;La VCL es la biblioteca de clases que incorpora C++ Builder y la MFC (Fundación de Clases de Microsoft, siglas en inglés) el Visual C++. Esta última cuenta con más de 300 clases para su más variado uso. La gran ventaja del C++ Builder es el hecho de estar concebido sobre la VCL lo que lo hace fácil la translación de los códigos a Delphi y por otra parte Borland trabaja en un producto integrador del lenguaje C++ completo, llamado C++ BuilderX que no solo hará posible portar códigos a Linux, sino que a cualquier o desde cualquier otra plataforma y/o compilador de este lenguaje.&lt;/p&gt;
&lt;p&gt;¿Dónde está entonces la portabilidad de Visual C++? En que este ambiente está girando alrededor de la generación de código intermedio administrado y con el mismo es posible ejecutarlo en cualquier máquina virtual. La estrategia .NET de Microsoft ya ha tenido resultados en Linux con la implementación de Mono, el traspaso de código hasta el momento solo es posible en C# (C sharp ó C almohadilla) que constituye a su vez una combinación mejora de los tres lenguajes que hemos tomado como casos de estudio.&lt;/p&gt;
&lt;p&gt;Estos dos ambientes analizados centran su atención en el paradigma Orientado a Objetos soportando el paradigma Estructurado gracias a la compatibilidad que comparten con su lenguaje de programación base. La mayoría de los lenguajes propios del paradigma Funcional brindan sus potencialidades a través de su encapsulamiento en DLL (Bibliotecas de Enlace Dinámico, siglas en inglés) o cualquier tipo de módulo propio del ambiente. Este es el caso también del tercer lenguaje Java.&lt;/p&gt;
&lt;p&gt;Visual Studio, si bien coincidimos en que es la herramienta de desarrollo más integradora que existe, sus costos son en la actualidad lucrativos para la mayoría de entidades productoras de software; independientemente del hecho de que Microsoft esté llevando a cabo algunas ofensivas comercializadoras muy competitivas.&lt;/p&gt;
&lt;h5 id=&#34;java--eclipse&#34;&gt;Java / Eclipse&lt;/h5&gt;
&lt;p&gt;Descendiente del Oak y con el propósito de que se pudiera insertar en cualquier equipo electrodoméstico estudiaremos el tercer lenguaje: Java. Original de Sun Microsystems es Java el lenguaje más extendido sobre las plataformas de teléfonos celulares. Es muy rico en su sintaxis contando con un número considerable de palabras reservadas y reglas gramaticales. Soporta todas las características del paradigma Orientado a Objetos.&lt;/p&gt;
&lt;p&gt;Fruto de su amplia extensión en cuanta plataforma de hardware existe enseguida las herramientas CASE fueron capaces de generar código para él. Los paquetes de componentes constituyen su base fundamental de componentización nativa. Las demás formas de reutilización de componentes no es algo que lo lleve implícito este lenguaje.&lt;/p&gt;
&lt;p&gt;Como podemos inferir la ejecución del código que se produce de la compilación de una aplicación programada en Java (que no es más que un código intermedio llamado &amp;ldquo;ByteCode&amp;rdquo;) debe realizarse bajo la máquina virtual propia para esa plataforma. Aprovechando esto Microsoft introdujo cambios en la máquina virtual que adjuntaba con su Internet Explorer haciendo que existieran ciertos problemas de compatibilidad, por suerte esto ha cambiado y ya casi no existen. Es el mismo caso para los diferentes Sistemas Operativos por lo que para cada una existen diferentes implementaciones y extensiones.&lt;/p&gt;
&lt;p&gt;Preferimos hablar del lenguaje en sí y no del ambiente de desarrollo puesto que en este tópico la competencia es muy reñida entre un producto u otro. Ejemplo de ello tenemos a JBuilderX de Borland; Visual J# (extensión de Java soportando código administrado e incorporado como parte del Microsoft Visual Studio); VisualAge de IBM y Eclipse de Eclipse Foundation que es el más extendido.&lt;/p&gt;
&lt;p&gt;Los costos son elevados en caso de los ambientes de desarrollo pues algunas máquinas virtuales y la biblioteca de clases JFC (Fundación de Clases de Java, siglas en inglés) son gratuitas e incluso incluyen su código fuente.&lt;/p&gt;
&lt;p&gt;Todos los lenguajes se pueden utilizar para el desarrollo de cualquier tipo de aplicaciones desde las de consola y las que llevan bases de datos hasta las que hacen uso de la multitarea o son concebidas de una forma distribuida (sin dejar de tener en cuenta las de redes y las &amp;ldquo;standalone&amp;rdquo;). Dependiendo solo de las restricciones propias de los ambientes desde los que son utilizados. Poco a poco se van creando los artefactos necesarios para que cada uno soporte la última tendencia o tecnología moderna en cuanto a la creación de productos informáticos. Algunos son más rápidos que otros en responder dependiendo del estado del ambiente, su comunidad de seguidores y compañías que lo desarrolla.&lt;/p&gt;
&lt;p&gt;Quisiéramos que este material le sirva como introducción a la hora de tomar decisiones críticas en el proceso de implementación de una determinada solución de software. Nos hemos basado en la experiencia y los consejos de muchos profesionales que han dedicado miles de horas al incansable arte de la programación.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Algunas consideraciones de Diseño</title>
      <link>/es/post/consideraciones-de-dise%C3%B1o/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/consideraciones-de-dise%C3%B1o/</guid>
      
        <description>&lt;p&gt;Dentro de las etapas en que se divide el ciclo de vida del desarrollo de software, el Diseño es considerada como la más importante. Se ha calculado que puede llegar a ocupar hasta un treinta y cinco por ciento del total de tiempo. Es por ello que abordaremos el tema para dar algunas consideraciones generales que siempre son válidas a tener en cuenta, sea cual sea el tipo de aplicación a desarrollar.&lt;/p&gt;
&lt;p&gt;Existen tres paradigmas principales de programación: el Estructurado, el Orientado a Objetos y el Funcional. Cada uno tiene sus características propias que están muy relacionadas con la evolución en el tiempo de la programación. Hoy en día el paradigma Estructurado se ve muy ligado a la implementación de algoritmos, el Funcional a la resolución de problemas en la Inteligencia Artificial y el paradigma Orientado a Objetos -el más extendido- a la implementación de aplicaciones.&lt;/p&gt;
&lt;p&gt;Es precisamente en este último paradigma donde los profesionales de la computación han hecho la mayor cantidad de aportes ya sean teóricos o prácticos como pueden ser las herramientas que ayudan en su uso. Las herramientas CASE (Ingeniería de Software Asistida por Computadoras, siglas en inglés) son, sin duda alguna, unas de las más representativas. Mediante el modelado visual de la jerarquía de clases a través de UML (Lenguaje Unificado de Modelado, siglas en inglés) puede generarse código altamente confiable y fácilmente modificable, para infinidad de lenguajes de programación; dándole así una elegancia agregada al diseño.&lt;/p&gt;
&lt;p&gt;Otro tipo de herramientas son las RAD (Desarrollo Rápido de Aplicaciones, siglas en inglés). En ellas se puede trabajar en el diseño y la implementación a la vez de una forma hasta intuitiva; lográndose con ello disminuir considerablemente el tiempo total de desarrollo del proyecto. El hecho de poder mezclar de una forma muy fácil las reglas del problema dentro de los eventos de los campos visuales de la aplicación (técnica tan difundida en aplicaciones pequeñas y medianas) trae consigo que se afecte directamente la reutilización del código.&lt;/p&gt;
&lt;p&gt;Para contrarrestar este problema le proponemos, que una vez haya decidido el paradigma que va a utilizar y el uso o no de herramientas CASE y/o RAD, piense también en separar la lógica de la aplicación de la vista de la misma. La técnica más utilizada para esto es la componentización de la solución ya sea mediante COM (Modelo de Objetos en Componentes, siglas en inglés), Scriptlets, Servicios Web o cualquier otra vía propia de la herramienta de implementación (ejemplo: BPL de Borland Delphi), en dependencia por supuesto de la portabilidad que le quiera dar a la solución.&lt;/p&gt;
&lt;p&gt;Nunca descarte el posible uso de la aplicación a ser desarrollada desde la consola de trabajo (stdin, stdout en Linux) sobre todo si la misma realiza tareas programadas. Para ello diseñe adecuadamente los parámetros necesarios que se le deberán pasar.&lt;/p&gt;
&lt;p&gt;La creación de nuevos procesos (en Linux) o hilos de aplicación (en Windows) es muy común en las aplicaciones que quieran hacer uso de la multitarea. Si su aplicación es una de ellas tenga en cuenta el uso de las llamadas &amp;ldquo;piscinas de hilos&amp;rdquo; que le incorporan un mayor rendimiento y escalabilidad a la solución. Otro aspecto a tener en cuenta en este tema es la cantidad máxima de procesos o hilos que se pueden crear de forma tal que no se afecte el rendimiento final, piense siempre que no debe exceder la decena de unidades.&lt;/p&gt;
&lt;p&gt;Para las aplicaciones de mediano o gran tamaño es muy común hacer uso de las facilidades de la Programación Distribuida ya sea mediante la arquitectura Cliente/Servidor o la arquitectura N-capas o SOA (Arquitectura Orientada a Servicios, siglas en inglés). Llamada a Procedimientos Remotos e Invocación de Métodos Remotos (RPC y RMI, siglas en inglés respectivamente) son dos técnicas para implementar el modelo Cliente/Servidor. Mucho es el uso que se hizo y hace en la N-capas, tanto es, que constituye la base fundamental de su evolución: SOA. Esta última se basa en la distribución de Servicios Web como unidades estructurales implementados cada uno como un modelo N-capas, siendo considerada la de más futuro en los venideros años.&lt;/p&gt;
&lt;p&gt;Hemos tratado de mantenernos lo más alejado posible de toda clase de decisiones, intentando siempre no mencionar productos o marcas para que no busquen en nosotros una preferencia marcada hacia uno u otra parte de las actuales controversias (IBM-Mac, Windows-Linux, .NET-Java, etc.). Lo que sí quisiéramos es que no utilice tecnologías propietarias que no sean estándares y pueda así evitarse futuros dolores de cabeza sobre todo a la hora de diseñar los mecanismos de comunicación. Nos referimos a DCOM (COM Distribuido), MTS (Servidor de Transacciones de Microsoft, siglas en inglés), COM+ (DCOM + MTS) y CORBA por solo citar algunos ejemplos.&lt;/p&gt;
&lt;p&gt;Dentro de este punto quisiéramos tratar el formato de representación de los datos, si bien en el pasado se utilizó mucho los ficheros textos no estructurados y los ficheros estructurados; en la actualidad no son más que historia y añoranzas. XML (Lenguaje Extendido de Marcas, siglas en inglés) está llamado a ser el nuevo ASCII del intercambio de información; dándole así una nueva dimensión hasta ahora dominada por los protocolos binarios.&lt;/p&gt;
&lt;p&gt;Los ficheros de configuración (.INI) constituyeron todo un hito como combinación de los dos tipos de ficheros fundamentales (textos y estructurados) y por consiguiente la unión de sus respectivas ventajas. Esto fue así hasta la salida al mercado de Windows 95 donde se introdujo una buena nueva idea, la de centralizar la configuración de las computadoras, en el llamado &amp;ldquo;registro de configuraciones&amp;rdquo;. Lo malo fue su implementación lo que a la postre se convirtió en una pesadilla para los programadores. Es aquí donde intervine otra vez la mano salvadora de XML que poco a poco se está adueñando de esta funcionalidad también.&lt;/p&gt;
&lt;p&gt;El diseño de marcos de trabajo (frameworks) es una buena idea si se quiere hacer más de un trabajo relacionado que compartan jerarquías de clases de forma tal que le sirva como base. Ejemplos tenemos sobrados: VCL, MFC, Java, .NET Framework, BizTalk Framework, etc.&lt;/p&gt;
&lt;p&gt;La aplicación de un determinado patrón de diseño acorde con los requisitos propios de la solución a desarrollar es una de las mejores opciones que tiene el diseñador de software en estos momentos. Un tema relativamente nuevo en esta etapa no deja de fascinarnos con sus buena prácticas recomendadas amén de las dificultades que pueda traer.&lt;/p&gt;
&lt;p&gt;Quisiéramos que este material le sirva como introducción a la hora de diseñar una determinada solución de software. En un próximo artículo comentaremos algunas consideraciones de implementación con semejante objetivo.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Gobierno electrónico</title>
      <link>/es/post/gobierno-electr%C3%B3nico/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/gobierno-electr%C3%B3nico/</guid>
      
        <description>&lt;p&gt;Con la decisión de migrar todos sus sistemas y aplicaciones a Software Libre del gobierno alemán, hace ya uno tres años, estalló este fenómeno entre los diferentes países, llegando incluso a instancias particulares de ellos. Ejemplo de ello es España donde ya algunas de sus autonomías han tomado la misma decisión, otras no.
Lo cierto es que hay protestas por todo el mundo tanto de detractores como de los que piensan igual. Unos porque ven amenazados sus fuentes de ingresos y otros porque quieren que su gobierno haga lo mismo. El principal motivo por el cual la toman es porque &amp;ldquo;supuestamente&amp;rdquo; hay una reducción de costes en soluciones informáticas y eso permite mayores inversiones en otras cosas.&lt;/p&gt;
&lt;p&gt;Las comillas ahorita en &amp;ldquo;supuestamente&amp;rdquo; son a propósito, pues en este punto es donde debe intervenir el equipo de informáticos de las entidades (gobiernos en este caso) para que junto con la dirección y ubicándose claramente en el contexto decidan lo que realmente es mejor para la entidad. Por lo general no se analiza a profundidad y aparentemente se recortan gastos al no pagar licencias por cuestiones de software y cuando se suman los ahorros son significativos, sin embargo, no se tiene en cuenta (o cuando se hace muy superficialmente) varias cuestiones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El Software Libre no es gratis para nada.&lt;/li&gt;
&lt;li&gt;El costo asociado a la capacitación del personal sobre los nuevos sistemas es a veces superior al de las licencias.&lt;/li&gt;
&lt;li&gt;El cambio siempre suscita reproches.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Así que los gobiernos lo que no pueden es tomarse a la ligera una decisión tan importante como esta. Deben poder escoger lo que más se ajusta a sus necesidades en su entorno, ahora, eso sí, lo que no pueden es basar sus soluciones sobre protocolos y formatos propietarios.&lt;/p&gt;
&lt;p&gt;Todas las soluciones informáticas que se desarrollen deben estar soportadas sobre estándares abiertos, desde los protocolos de comunicación, hasta los formatos de documentos. Para ello debe trabajar con las herramientas más cómodas les resulten que soporten estos paradigmas.&lt;/p&gt;
&lt;p&gt;XML se ha convertido en el estándar de intercambio de información, así como los servicios web en el paradigma de la programación distribuida. La arquitectura de cualquier sistema a desarrollar o implantar en una entidad gubernamental sobre todo debe de estar en concordancia con estos lineamientos. XML y servicios web no son los únicos parámetros, existen muchísimos más con los que lidiar.&lt;/p&gt;
&lt;p&gt;La idea de redactar este artículo fue dada porque recibí la convocatoria a participar en el primer taller de gobierno en línea que recientemente se desarrolló en la provincia Las Tunas y no quise dejar pasar por alto el llamado de atención sobre las reflexiones antes expuestas.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>¿Se puede confiar ciegamente en Internet?</title>
      <link>/es/post/confianza-en-internet/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/confianza-en-internet/</guid>
      
        <description>&lt;p&gt;Internet se ha convertido poco a poco en la herramienta más útil del quehacer diario de las personas para un sin número de tareas que van desde la investigación científica hasta las compras y el ocio. Es por ello que constituye una fuente invaluable de conocimientos, pero ojo, no todo lo que brilla es oro.&lt;/p&gt;
&lt;p&gt;En varias ocasiones he leído como se descubren cosas insólitas que suceden en Internet, como la publicación de cómo confeccionar artefactos explosivos o de cómo se ponen de acuerdo miembros de sectas para suicidarse masivamente, etc. Podríamos catalogar lo antes publicado como el pago (si bien no necesario) que hay que hacer por las incontables ventajas que ella ofrece.&lt;/p&gt;
&lt;p&gt;Recientemente leí que la asociación de personas que creen que el planeta Tierra es plano y no esférico (cada día me impresiona más lo que pueden creer las personas) ya tiene una buena cantidad de miembros; de cosas como estas es de lo que quiero hablarles hoy, de que, si bien en Internet hay muchas cosas interesantes, también hay mucha basura. Se me ocurrió escribir sobre esto pues leyendo el blog de Francisco Joma&amp;lt; leí su comentario sobre el artículo: &amp;ldquo;Consejos para la programación en Linux&amp;rdquo; que me llamó fuertemente la atención, sobre todo luego de leerme el artículo original.&lt;/p&gt;
&lt;p&gt;Coincido plenamente con este profesional que, a pesar de no compartir algunas ideas filosóficas con él, lo considero una persona admirable. Es un defensor a muerte de Linux, pero del Linux bueno, el que tiene errores y no es perfecto. En el comentario del artículo referido Francisco no llega a refutar todos los argumentos que se exponen, pero los que no refutó no es necesario hacerlo pues son muy triviales. Los exhortos a que lo lean y evalúen, lo considero una sarta de sandeces escritas y plasmadas en Internet. A quién se le ocurre cuestionar tan si quiera el desarrollo bajo una API unificada o que programar con un editor de texto al estilo notepad.exe es mejor a veces que un IDE como Visual Studio.NET o defender el hecho de no tener una fuente de documentación de desarrollo como MSDN.&lt;/p&gt;
&lt;p&gt;Linux habrá podido ganar mucho terreno en el sector de los servidores e incluso en el de usuario común, pero le falta muchísimo, pero muchísimo todavía en el desarrollo de sus aplicaciones. Eclipse es uno de los pocos IDE para Linux que realmente vale la pena (amén de Kylix) pero mientras sigan mirándose el ombligo y diciendo que lo mejor es lo de Linux y que Windows no tiene nada bueno, Linux no va a mejorar.&lt;/p&gt;
&lt;p&gt;No es primera vez que se trata el tema del desarrollo de aplicaciones en Linux, es un tema complejo y que todavía está en pañales sobre todo por cuestiones de números (el por ciento de usuarios con este Sistema Operativo todavía es muy bajo). Poco a poco debe ir mejorando la situación.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ISFUROS 2006</title>
      <link>/es/post/isfuros-2006/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/isfuros-2006/</guid>
      
        <description>&lt;p&gt;He estado tan ocupado en tareas aledañas que poco a poco fue pasando el tiempo y ni cuenta me di de que llevaba meses sin escribir nada, luego caí en un vacío profesional que no me incitaba a redactar nada hasta hoy mismo que luego de participar en el ISFUROS me llamé yo mismo a reflexionar y no dejar pasar inadvertido el evento.&lt;/p&gt;
&lt;p&gt;El International International Symposium on Fuzzy and Rough Sets (ISFUROS) fue un evento que se desarrolló en la UCLV del 4 al 6 de Diciembre del 2006. El comité Organizador hizo un trabajo encomiable y digno de elogiar pues a pesar de todas las carencias materiales que a diario nos entorpecen, el evento fue un éxito total, al menos yo lo considero así.&lt;/p&gt;
&lt;p&gt;Al evento pudo asistir un profesor por cada Universidad donde se estudia Informática o Cibernética como invitados, además, claro está de aquellos que tuvieran trabajos aceptados por el Comité Evaluador. El Comité Organizador y Evaluador estuvo compuesto por personalidades nacionales y extranjeras de alto rango y quehacer científico, se podría catalogar de excelencia ambos comités.&lt;/p&gt;
&lt;p&gt;Por la parte extranjera asistieron muchos profesionales de varios países que trabajan las líneas de investigación centrales del evento. Dentro de las personalidades que asistieron se encuentra Jose Luis Verdegay, Kaoru Hirota, Bernard de Baets, Witold Pedrycz, Wojciech Ziarko, estos dos últimos, presidentes de las asociaciones internacionales de conjuntos difusos y aproximados respectivamente.&lt;/p&gt;
&lt;p&gt;Las exposiciones estuvieron muy buenas (todas en inglés -incluyendo las de los cubanos-) con trabajos muy buenos todos (exalto otra vez el trabajo del Comité Evaluador). Fue una ocasión única de compartir con tan altas personalidades mundiales y oír sus criterios y en lo que actualmente trabajan.&lt;/p&gt;
&lt;p&gt;Las actividades colaterales fueron organizadas con esmero, desde el aseguramiento alimenticio, el hospedaje, hasta los recorridos turísticos. La idea final fue repetir el encuentro cada dos años.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Poniéndome al día</title>
      <link>/es/post/poni%C3%A9ndonos-al-d%C3%ADa/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/poni%C3%A9ndonos-al-d%C3%ADa/</guid>
      
        <description>&lt;p&gt;No voy a ponerme a relatar las vicisitudes que llevaron a que prácticamente no tenga Internet a mi disposición, porque sería aburrirlos en vano y al final lo más seguro es que no entenderían y todo quedará igual, así que para qué perder el tiempo entonces; aprovechémoslo en otras cuestiones más importantes.&lt;/p&gt;
&lt;p&gt;Quise hacer esta breve introducción pues lo que quiero comentarles hoy se relaciona con este hecho precisamente. El pasado domingo día 3 de diciembre, vine a la Universidad temprano pues estaba de guardia todo el día y aprovecharía Internet para ponerme al día y confeccionar una serie de documentos atrasados que tenía.&lt;/p&gt;
&lt;p&gt;¡Increíble lo que me sucedió, no pude hacer ningún documento pues terminé de ponerme al día a las 8:00 PM! No me considero un profesional que examina a profundidad todas las temáticas de la rama de la computación. Dentro de las pocas que puedo revisar (me gustaría poder hacer más) pues cuestiones igualmente obvias no puedo enterarme de todo lo que se relaciona con ellas. Es por eso que decidí revisarlas periódicamente con diferente frecuencia en dependencia del nivel de actualización de los sitios, algunos sitios los visitaba diariamente, otros semanales y otros mensuales. Así fue pasando el tiempo y adopté un lector de RSS como herramienta de trabajo imprescindible; así todo fluctuó de una manera más cómoda y rápida.&lt;/p&gt;
&lt;p&gt;Este sistema el único defecto que poseía (y posee todavía) es que no está preparado para cuando no hay Internet pues al fin y al cabo sigo siendo yo el que al final determine lo importante o no y dentro de los primeros lo que realmente vale la pena leer y estudiar a profundidad.&lt;/p&gt;
&lt;p&gt;Antes del día antes mencionado estuve 10 días sin poder consultar absolutamente nada de Internet y cuando al fin lo pude hacer miren cuantas horas me costó y el sacrificio que tuve que hacer. Al punto que quiero llegar es poner un ejemplo de lo importante que es estar al día en las temáticas de la ciencia que de desempeñes y el súper papel que juega Internet en eso. Hoy por hoy es difícil imaginarse un profesional competente que no tenga a su disposición Internet.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Amaos los unos a los otros</title>
      <link>/es/post/amaos-todos/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/amaos-todos/</guid>
      
        <description>&lt;p&gt;Leyendo el título de este artículo pudieran pensar que se enfrentarán a un debate relacionado con la teología, pero no será así. Creo haber escrito antes algo sobre las diferencias entre profesionales de la computación y la semejanza que tienen sus discusiones con las que sostienen los creyentes con los no creyentes en Dios.&lt;/p&gt;
&lt;p&gt;No repetiré lo que ya dije una vez, esta vez me desenvolveré en la rama de mi profesión solamente. Cada día salen nuevas tecnologías y por lo general lo que hacen es dividir a la comunidad en dos bandos, el que la acepta y el que no la acepta; este proceso se repite muchas veces dentro de cada bando y así sucesivamente.&lt;/p&gt;
&lt;p&gt;Al final todos están en lo cierto pues &amp;ldquo;para gusto están los colores&amp;hellip;&amp;rdquo; y eso hace que cada profesional se rodee de un conjunto de tecnologías y herramientas y que luego el cambio hacia otras le resulte falta y a veces nunca lo hacen, aunque queden obsoletas. Pienso que el error está (y pasa actualmente, según creo) en las rencillas que tienen los profesionales de la computación hacia las implementaciones particulares de las tecnologías y no a ellas en su concepción.&lt;/p&gt;
&lt;p&gt;Todos entendemos la necesidad y utilidad de AJAX, pero unos prefieren Atlas y otros jAJAX, unos prefieren RPC y otros RMI y así por el estilo pasa con casi todas las tecnologías de desarrollo de software que hay en el mercado. Las motivaciones para que este fenómeno se de son muy variadas, donde intervienen las licencias de software, precios, filosofías y otros factores, cada cual tiene los suyos.&lt;/p&gt;
&lt;p&gt;El título de este artículo es con toda intención, le llamaré &amp;ldquo;los unos&amp;rdquo; a aquellos seguidores de las tecnologías y herramientas de Microsoft y llamaré &amp;ldquo;los otros&amp;rdquo; a aquellos seguidores de las de Linux. No hay desmérito en que precisamente haya sido en ese orden y no al revés por mi ya sabida predilección por Microsoft (es decir yo sería un &amp;ldquo;uno&amp;rdquo; y no un &amp;ldquo;otro&amp;rdquo;), dada más bien por la fuerza de costumbre, aunque no me declaro un ciego, sino más bien un agnóstico de este tipo de creencias. Bueno, a lo que iba.&lt;/p&gt;
&lt;p&gt;Microsoft atacó con medidas drásticas (con las cuales no concuerdo en nada) desde la coerción hasta los juicios a otras empresas etc. Creo que al final haga lo que haga gana siempre el mejor y en eso Microsoft tenía las de ganar sin llegar a esos extremos que tanto dinero le ha costado. Si bien esto fue así, de un tiempo para acá la situación ha cambiado y en vez de seguir luchando contra lo indetenible (fenómeno Linux) ha decidido aliarse sin traicionar sus propios principios (¿no hay mejor estrategia verdad?). Ejemplo de ello tenemos el recién mega-acuerdo con Novell que incluye de todo como en botica (patentes, herramientas, tecnologías de desarrollo, códigos fuentes, etc.) el cual ha sido muy bien visto por su &amp;ldquo;unos-comunidad&amp;rdquo; y no tan así por la &amp;ldquo;otros-comunidad&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;La &amp;ldquo;otros-comunidad&amp;rdquo; nació y crece con esa fobia hacia Microsoft sin importar si Microsoft tiene o no razón o si desarrolla algo mejor; lo único que hace el mirarse el ombligo y ser ciega y sorda para cualquier otro criterio. Así son la mayoría de las personas de esa comunidad con las que me he topado alguna vez en mi vida, lo bueno es que tampoco son todas las personas, sino que hay un grupo más asequible que entiende y razona las diferencias y sabe valorar muy bien las cosas.&lt;/p&gt;
&lt;p&gt;Son simples cuestionamientos los que quisiera que se hagan ustedes mismos a ver si les sucede lo mismo y lo más que quisiera que supieran apoyar al que realmente tenga la razón para un contexto dado y no se dejen llevar por las creencias tecnológicas, por muy arraigadas que las tengan, la próxima vez que se enfrente a la pregunta de a qué grupo pertenecen, si a los &amp;ldquo;unos&amp;rdquo; o a los &amp;ldquo;otros&amp;rdquo;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>La delgada línea entre reescribir y reutilizar código</title>
      <link>/es/post/reescribir-%C3%B3-reusar/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/reescribir-%C3%B3-reusar/</guid>
      
        <description>&lt;p&gt;Hay veces que no nos damos cuenta de la existencia de delgadas líneas que existen entre cosas. Por otra parte, no sé por qué tenemos esa desconfianza en lo que otro hace. La reticencia al cambio es algo siempre presente en toda persona y es un mal muy difícil de arraigar, hay que ser un experto para lograr que se entiendan los cambios.&lt;/p&gt;
&lt;p&gt;Serán por estas razones por las que nosotros los profesionales de la computación cada vez que tenemos que desarrollar una aplicación pensamos seriamente codificarla desde cero, incluso a veces lo hacemos. De nada vale que nos hayamos leído cientos de artículos que resalten la importancia de hacer código reusable para utilizarlo posteriormente. En el mejor de los casos utilizamos componentes desarrollados por nosotros mismos en otro momento, pero rechazamos todo en lo que no hayamos puesto nuestras manos.&lt;/p&gt;
&lt;p&gt;Yo se lo achaco a problemas de cultura, si interiorizáramos estas cuestiones a profundidad y pensamos solamente un poquito que efectivamente esto es cierto, no tendríamos necesidad alguna de gastar horas y horas &amp;ldquo;reinventando la rueda&amp;rdquo; o &amp;ldquo;descubriendo el agua tibia&amp;rdquo;. Es cierto que al utilizar código (dígase componentes) tenemos que estudiar su referencia, que la mayoría de las veces no están a la altura de la documentación de una API o Framework profesional, pero les aseguro que es mucho menor el tiempo que se puede emplear en esto que el que se puede emplear para implementarlo desde cero.&lt;/p&gt;
&lt;p&gt;Por lo general los desarrolladores de componentes hacen sus trabajos de forma impecable, funcionamiento correcto, comportamiento más que probado y referencia completa. Somos nosotros los supuestos clientes los que no le otorgamos la confianza suficiente como para utilizarlos.&lt;/p&gt;
&lt;p&gt;En el caso particular de la carrera de Ingeniería Informática su currículo está muy pensado sobre todo a desarrollar desde cero (otro factor que influye en lo antes expuesto); por suerte los encargados de rediseñar su Plan de Estudios se dieron cuenta y entonces el nuevo Plan de Estudios &amp;ldquo;D&amp;rdquo; se enfocará más al reuso que a la reescritura de código. Otorgarle la confianza a lo que se lo merece en aras de ganar tiempo para otras cuestiones fundamentales del proceso de desarrollo de software. Las mentes tienen que cambiar, de lo contrario, jamás podremos hacer algo que esté al nivel de los estándares mundiales de hoy en día.&lt;/p&gt;
&lt;p&gt;Para que se tenga un ejemplo de esto, alguien se ha preguntado el ¿por qué en Windows existe el Worpad si Microsoft Word es mejor por millas y millas de funcionalidad? Sencillamente por problemas de compatibilidad (al igual que hay dos copias del Notepad.exe) y alguien se ha preguntado ¿Por qué su tamaño es despreciable con respecto al Word, por qué tardó tanto en ser actualizado? Pues bien, en su momento era otra compañía su desarrolladora y decidieron hacerlo en Ensamblador a pesar de ya existir la API de Win32, cierto fue que permitía un buen número de funcionalidades de una manera muy eficaz (rapidez y consumo de memoria) pero su mantenimiento se hizo insoportable al punto de que tuvo que ser vendido a Microsoft.&lt;/p&gt;
&lt;p&gt;Con esto no quiero decir que las cosas no se hagan eficientes, sino que hay que llegar a un balance entre lo eficiencia y la eficacia del proyecto, y me despido porque me estoy yendo del tema.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>El futuro del Ensamblador</title>
      <link>/es/post/futuro-del-ensamblador/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/futuro-del-ensamblador/</guid>
      
        <description>&lt;p&gt;Si difícil fue en su tiempo programar en lenguaje de máquina, difícil fue también hacerlo en ensamblador, aunque todavía haya personas que no lo quieran reconocer. El lenguaje ensamblador constituyó un paso de adelanto indudable sobre su predecesor, pero no estaba extinto de problemas.&lt;/p&gt;
&lt;p&gt;Poco a poco fue tomando auge, pero a la vez fueron surgiendo nuevos lenguajes que se le superponían y a la vez acomodaban al programador. Esto no es más que parte de la lógica de la evolución de la programación. A medida que estos nuevos lenguajes iban tomando auge, a la vez otros nuevos se desarrollaban y así sucesivamente.
Hoy por hoy hay muchos profesionales que insisten en que los proyectos desarrollados en ensamblador son mejores que los que son desarrollados en lenguajes de alto nivel (Object Pascal, Java, C#, etc.) pues consumen menos espacio en disco, memoria cuando están ejecutándose y son extremadamente veloces. En cierta manera no es menos cierto lo que plantean, pero hay elementos que no tienen en cuenta. Con los estándares de desarrollo profesional de software del momento estos argumentos pierden importancia frente a otros como son (sobre todas las cosas) el tiempo de respuesta y completitud de los proyectos.&lt;/p&gt;
&lt;p&gt;Se hace insoportable el mantenimiento. La industria de software moderna exige cada vez más que las aplicaciones sean desarrolladas en tiempo record, cosa que es incomparable cuando se programa en ensamblador. En todos los casos me he referido a las aplicaciones empresariales tradicionales.&lt;/p&gt;
&lt;p&gt;El ensamblador está condenado hoy en día para el desarrollo de firmware a muy bajo nivel para los dispositivos empotrados, por ejemplo: sistemas operativos para dispositivos móviles, equipos médicos, de telecomunicaciones, etc. Un buen amigo me dijo hace ya unos años que el programa que por sus características propias tuviera que implementar alguno de sus módulos en ensamblador, ese programa estaba mal diseñado; comparto con mi amigo esa verdad (si eso fue hace unos años ¿qué podremos pensar hoy?). Los Plan de Estudios &amp;ldquo;D&amp;rdquo; tiene esto muy en mente también y todo parece ser que se seguirá impartiendo conocimientos de ensamblador, pero a los niveles diferentes a los que se estaban dando.&lt;/p&gt;
&lt;p&gt;El dilema está planteado por las características de las dos grandes plataformas de desarrollo de software actuales (Java y .NET) ninguna permite interactuar con el ensamblador, eliminándole al programador infinitas molestias. Si todo parece indicar que esto va a continuar en los próximos años entonces por qué torturarnos enseñando algo que poco a poco va a ir desapareciendo (Microsoft está llevando adelante un proyecto de un Sistema Operativo en C#).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Fanatismos</title>
      <link>/es/post/fanatismos/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/fanatismos/</guid>
      
        <description>&lt;p&gt;Hay que ver que el ser humano, en su vano afán de querer tener siempre la razón, hace cosas increíbles. Una de ellas es aquella manía de empecinarse con algo (dígase objetos, conceptos, teorías, personas, etc.) que le hemos llamado fanatismo.&lt;/p&gt;
&lt;p&gt;¿Alguien podrá decir que no es fanático a nada? Creo que no, pues ¿quién no se obsesionó con su primer amor? Existen varios tipos de fanatismos, el que se profesa por los objetos materiales, la religión, los equipos deportivos, etc. Pero no es de esos tipos de fanatismo a los que quiero referirme, sino a un tipo especial y que nos toca muy de cerca a todos los que de alguna manera desarrollamos nuestras vidas vinculadas a la computación, me refiero al fanatismo tecnológico.
Sin dejar de asemejarse con otros fanatismos (al menos en sus esencias fundamentales), este es un poquito particular. Se puede ver aplicado en cualquier rama de la computación: filosofías, hardware, software, metodologías, sistemas operativos, servicios, servidores, etc. El más clásico y que ha tomado mucho auge en los últimos tiempos es aquel aplicado al software libre y al software propietario.&lt;/p&gt;
&lt;p&gt;¿Quién tiene la razón? ¿Quién ganará la guerra? se preguntarán muchos imparciales que pueden ver el fenómeno desde las gradas. Los que están en cada bando, evidentemente confían e intentan asegurarse que serán ellos los ganadores con toda la razón de su parte. Ahora bien, para aquellos que, sin estar en las gradas, pero tampoco directamente en ningún equipo (donde creo que actualmente estoy) la respuesta a esas inquietudes parece ser la más lógica.&lt;/p&gt;
&lt;p&gt;Realmente creo que ninguno ganará pues los dos bandos tienen razón en muchas cosas y solo dejan de tenerla en pequeñas asperezas del modelo. Si de todas formas tuviera que vaticinar un ganador diría que será el que mejor logre adaptarse a la forma de ver las cosas del otro; pero más aun, si tuviera que concretar diría que el software propietario es el que pudiera hacerlo si hace bien las cosas. Motivos por los cuales me decido a decirlo es porque en la actualidad cuenta con la inmensa mayoría de aplicaciones ya desarrolladas y con un altísimo nivel de penetración en el mundo completo, esto hace que las compañías tengan un gran capital para invertir en hacerse cada día mejores (cosa muy importante).&lt;/p&gt;
&lt;p&gt;¿Qué podría dar al traste con esta decisión? Que en vez de dedicarse a suavizar las licencias comerciales con las cuales se distribuyen sus productos, dediquen esfuerzos a atacar al bando contrario. El movimiento de software libre no se ha quedado con los brazos cruzados, pero tiene que cambiar radicalmente su forma de enfrentar las cosas. Aquellos que son seguidores de este movimiento no pueden ver, ni escuchar, ni tan siquiera imaginarse que lo que le estén mostrando o hablando &amp;ldquo;huela&amp;rdquo; a software propietario, porque ponen el plug a tierra y es como si no existiera la contraparte, es decir, solo lo de ellos es mejor y no tiene defectos algunos, es a esto precisamente a lo que me refiero. Que me disculpen los que no piensan así, pero en mi experiencia me ha tocado enfrentarme a muchas de estas personas.&lt;/p&gt;
&lt;p&gt;En un principio y como fanático al fin del software propietario me enfrascaba en la más tediosa discusión por defender lo que tenía dentro de mí, esto fue así hasta que desperté de ese sueño. Hace falta que muchos más despierten. Actualmente hago igual que cuando alguien intenta demostrarme que Dios creó el mundo (que me disculpen los creyentes), acordamos no hablar de ese tema y seguir conversando de lo hermosa que es la vida.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Herramientas para los blogs</title>
      <link>/es/post/herramientas-para-blogs/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/herramientas-para-blogs/</guid>
      
        <description>&lt;p&gt;No hay duda que la web revolucionó el mundo de la información a disposición de todos sus usuarios, pero por sus propias características tiene un gran inconveniente: sigue siendo el usuario el responsable de visitar expresamente los sitios de los que quiere nutrirse.&lt;/p&gt;
&lt;p&gt;Cuando se visitan dos o tres sitios o se hace con poca frecuencia esto no interesa mucho, sin embargo, cuando se requiere informarse apenas se publique la información esto se convierte en un problema.&lt;/p&gt;
&lt;p&gt;Es para ello que surgen los formatos de intercambio de informaciones RSS que no son más que ficheros XML que guardan, entre otras cosas, el encabezado de la información, el cuerpo, fecha, localización completa, entre otros campos. Este fichero de intercambio no es por gusto pues se brinda para que los usuarios necesitados de &amp;ldquo;estar en la última&amp;rdquo; utilicen un cliente al efecto. Dentro de los clientes más utilizados están el FeedReader y el RSSReader. Cada uno de ellos son capaces cada cierto tiempo de descargar los ficheros de los sitios que se tengan configurados y avisarles a los usuarios de las nuevas informaciones que hay publicadas con respecto a la vez anterior que se conectó.&lt;/p&gt;
&lt;p&gt;Básicamente ese es el funcionamiento de estas herramientas. Existen varios formatos de estos ficheros de intercambio, ya habíamos dicho los RSS, pero también existen los CDF, cada uno con más de una versión. Existe otro formato de fichero que es una reunificación de los dos anteriores que como toda reunificación se ha convertido en una tercera variante. Como la conversión de uno a otro no es cosa difícil (apenas aplicar una transformación XSLT) por lo general los sitios y portales que brindan estas posibilidades ofertan los tres tipos de ficheros.&lt;/p&gt;
&lt;p&gt;Son los blogs el tipo de sitio que más ha ayudado a proliferar estas tecnologías. Recordemos que los blogs se pueden ver como la versión digitalizada de un diario personal. Hoy por hoy constituyen precisamente los blogs la fuente número uno de publicaciones de científicos, programadores, filósofos, etc. En el mundo, todo profesional que se respeta tiene uno y sobre todas las cosas establece un compromiso para con sus suscriptores de mantenerlo actualizado constantemente.&lt;/p&gt;
&lt;p&gt;Microsoft comprendió rápidamente lo antes expuesto y le ha incorporado la posibilidad de RSS al Internet Explorer 7 que pronto saldrá al mercado. Por su parte existe una extensión para Mozilla Firefox que permite lo mismo. Poco a poco pienso que se hará más común su integración con los restantes navegadores de Internet.&lt;/p&gt;
&lt;p&gt;Yo comencé a utilizar el FeedReader apenas lo vi pues comprendí todo lo que podía ayudarme, al punto que lo instalé en las máquinas de los laboratorios docentes para que se utilizara. En mi máquina le configuré todos los sitios de los que asiduamente visito y más nunca tuve que ir a ellos a ver qué tenían de nuevo, el FeedReader cada cierto tiempo (por lo general una o dos horas) me avisaba. Luego de la reinstalación de los servidores en pos de insertarnos en RedUNIV se puso que la autentificación contra el proxy fuera integrada y ahí mismo dejó de funcionar esta útil herramienta, esperamos que en alguna versión superior tenga la posibilidad de autentificase por NTLM.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Borland Co.</title>
      <link>/es/post/borland/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/borland/</guid>
      
        <description>&lt;p&gt;Es increíble cómo las malas estrategias de negocio llevan a convertir a una empresa líder mundial en herramientas de desarrollo en una empresa de retaguardia tecnológica. Específicamente me refiero a Borland Company.&lt;/p&gt;
&lt;p&gt;Borland surgió allá por los lejanos años 80 como desarrolladora de los mejores compiladores del lenguaje Pascal y luego de sus ambientes de desarrollo Turbo Pascal (Microsoft en su momento lanzó en Microsoft Pascal que fue todo un fracaso). Ya desde la versión 3 se perfiló como una herramienta innovadora para su tiempo, pero no fue hasta la versión 5 que se consagró al permitir de manera integrada depurar errores. Apenas en la próxima versión (la 5.5) ya incorporaba al lenguaje el soporte (aunque muy rudimentario y con errores conceptuales) del nuevo paradigma de programación: la Orientación a Objetos. En esos tiempos no se conoció ningún marco de trabajo mejor que TurboVision para el desarrollo de aplicaciones con interfaces increíbles sobre MS-DOS, característica nueva en la versión 6. La versión 7 aportó pocas cosas nuevas, no siendo hasta la próxima que cambió de nombre el producto llamándose ahora Borland Pascal, cuya característica fundamental fue la posibilidad de acceso a la API de Windows y poder desarrollar aplicaciones con interfaces que usaban la GUI.&lt;/p&gt;
&lt;p&gt;Ahí terminó esa línea de productos y con ella los fondos de la compañía, hasta el punto que tuvieron que despedir a casi todo el personal y quedarse solo con una reducida cantidad de programadores. Ellos se encerraron durante casi dos años desarrollando un producto nuevo súper secreto que iba a revolucionar las herramientas de desarrollo de aplicaciones. No se equivocaron, ese producto fue Borland Delphi 1. Éxito total, increíble, magnífico, se acababan los elogios cuando se le describía.&lt;/p&gt;
&lt;p&gt;Luego fueron saliendo las próximas versiones que se pueden catalogar más de lo mismo, amén de raras excepciones. Si bien la versión 3 incorporó las funcionalidades de COM y descendientes, no fue hasta la versión 4 donde se hace un salto cualitativo. La versión 5 más de lo mismo al igual que la 6 y la 7. El factor común de todas las versiones fue la mejora de los componentes de la versión anterior y mejoras en el IDE.&lt;/p&gt;
&lt;p&gt;A medida que fueron afianzándose en el mercado fueron desarrollando casi a la par también herramientas sumamente parecidas con la diferencia del lenguaje de programación, así fue como surgió Borland C++ Builder y Java Builder. La respuesta de los programadores del mundo completo no se hizo esperar y en poco tiempo Borland contaba con la mayor comunidad de desarrolladores volcados sobre sus herramientas, por eso no es extraño todavía hoy en día encontrar que sea Delphi el ambiente de desarrollo para el cual existan la mayor cantidad de componentes disponibles.&lt;/p&gt;
&lt;p&gt;Si bien esto es cierto, Borland no supo cuidar de esa comunidad y de sus justos reclamos. Nunca sacó versiones de sus productos en un idioma que no fuera el inglés y mucho menos entonces documentación técnica de ellos en los idiomas reclamados. Cuando comenzaron a ver problemas financieros otra vez pensaron que con cambiarle en nombre a la compañía los solucionarían, todo lo contrario, a la comunidad no le gustó mucho que dejara de ser Borland para convertirse en Inprise (Delphi 5 y su XML). Microsoft no se quedó con los brazos cruzados y de alguna manera convenció a los principales programadores líderes para que se pasaran a sus líneas de investigación y consiguió desarticular Borland (pronto publicaré un artículo al respecto que hace ya algunos años redacté por necesidad).&lt;/p&gt;
&lt;p&gt;Si algo identificó siempre a los productos de Borland ese algo fueron los IDE, desde las antiguas versiones de Turbo Pascal no había ningún IDE que se le asemejara y mucho menos que compitiera con su editor de códigos. Incluso el Quick Editor (qe.exe) -todo un editor de textos profesional- compitiendo ahí, ahí con el de Turbo Pascal se las veía negras para ganarle. Esto poco a poco fue desapareciéndose en Borland, dejándose tomar la delantera estratégica por Microsoft y su gama de herramientas de desarrollo Visual Studio, sobre todo a partir de las versiones para la plataforma de desarrollo .NET.&lt;/p&gt;
&lt;p&gt;Cuando alguna compañía está en picada, es cierto que sus errores se ven más porque lejos de levantar lo que hace es hundirse más en los problemas. Kylix (Delphi para Linux) que constituyó todo un suceso en las herramientas de desarrollo profesional en Linux no supieron consagrarlo a pesar de no contar con rival en el área. Fueron capaces de desarrollar tres versiones del producto, pero todo fue en vano. A la borda dinero y esfuerzo otra vez.&lt;/p&gt;
&lt;p&gt;Ian Marteens, el ilustre escritor de la saga de libros &amp;ldquo;Mastering in Delphi X&amp;rdquo; ya promueve en un propio sitio las herramientas Microsoft en vez de sus asiduas Borland. Anders Hejlsberg, ex-arquitecto principal de Delphi hoy por es el de C# 3 (Omega) luego de su rotundo éxito con C# y Visual Studio.NET 2002 a su paso a Microsoft. Danny Thorpe que se quedó en su puesto recientemente fue fichado por Google para trabajar con ellos. Poco a poco han perdido a sus principales profesionales y según evalúo todo es por las malas estrategias que están tomando.&lt;/p&gt;
&lt;p&gt;Resulta ser que después de tanto años y esfuerzos en cada versión de Java Builder que lanzaban anunciaron que apoyarían al máximo posible el ambiente Eclipse. Aseguraron que seguirían dándole soporte a Java Builder y que eso no iba a cambiar la posición de la compañía, pero del dicho al hecho hay tremendo trecho.&lt;/p&gt;
&lt;p&gt;Para colmo de males, y para que se tenga una idea de lo que estamos hablando, Borland busca afanadamente una compañía que le compre todos sus productos de desarrollo (Delphi, C++ Builder, Java Builder, etc.) para centrarse solo en la metodología de desarrollo de software ALM. Es un cambio total de estrategia lo que están buscando, supongo que no dan a basto con los planes con los que intentaban ganar más adeptos, no fue suficiente con sacar una versión de un nuevo ambiente de desarrollo integrador de lenguajes de programación en 2005 -que es una pura copia de Visual Studio.NET 2003- cuando en este año y sin apenas dar tiempo a digerir esta versión lanzaron Borland Developer Studio 2006 con la misma filosofía. Lo único nuevo es ambas versiones es la posibilidad de desarrollar aplicaciones tanto para Win32 como para .NET y no en todas combinaciones de lenguajes y plataformas posibles.&lt;/p&gt;
&lt;p&gt;Resumen: pérdida de confianza total por parte de la comunidad de desarrolladores en la compañía, pérdida de gran parte del mercado de aplicaciones de desarrollo (cada día son más los que pasan a otros ambientes), pérdida de ingresos, pérdida de identidad, desaparición total de la compañía (esto no ha pasado, pero sin duda alguna sucederá pronto).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Aspectos tener en cuenta a la hora de valorar el uso de Internet en la superación profesional</title>
      <link>/es/post/superaci%C3%B3n-personal/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/superaci%C3%B3n-personal/</guid>
      
        <description>&lt;p&gt;Tengo pendiente una entrevista en la Televisión Avileña (TVA) en el programa Equilibrio de las 12 del día para conversar sobre Internet y superación profesional. Por eso es que no queriendo ir en blanco a esa entrevista decidí anotar los aspectos a mencionar en algún momento por su relevante importancia:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La superación profesional produce un alto grado de inserción laboral.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Internet hace suponer le eliminación de las barreras de movilidad geográfica, horarios fijos, y usar materiales de formación efectivos con bastante calidad didáctica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Internet ha ayudado a mitigar la marginación de la mujer al permitir acceso a la misma información tanto a hombre como a mujeres, sin discriminación de sexo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si bien el 30% de las cuentas de Internet pertenecen a mujeres, cosa que no es mucho todavía, poco a poco crece y se hace más notable su presencia en la red.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Los usuarios de Internet poseen una gran cultura informacional y son capaces de crear su propio conocimiento sin ningún intermediario.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resultado de búsquedas en Internet de estos términos (según Google):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Superación Profesional 1 890 000
Internet 4 470 000 000
Superación Profesional por Internet 652 000&lt;/p&gt;
&lt;p&gt;Para concluir nada más cierto que esta cita:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;El rápido avance de la ciencia genera nuevas disciplinas que obligan a tener una visión futurista&amp;rdquo;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>La elegancia de la programación</title>
      <link>/es/post/programaci%C3%B3n-elegante/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/programaci%C3%B3n-elegante/</guid>
      
        <description>&lt;p&gt;Si está pensando que este artículo versa sobre un sistema para vestir o ver mejor está totalmente equivocado, veremos elegancia, pero en este caso del código escrito en un lenguaje de programación. Hay quienes piensan que eso no es necesario, que el código es obvio independientemente de su estructura. Craso error, es muy, pero muy importante escribir código de una forma estructurada.&lt;/p&gt;
&lt;p&gt;Es verdad que existen herramientas formateadoras de códigos llamadas &amp;ldquo;Identadores&amp;rdquo; como DelForEx para Delphi que una vez escrito el código en la más absoluta oscuridad estructural posible y con apenas presionar una combinación de teclas es capaz de estructurarlo y quedar como un &amp;ldquo;pincel&amp;rdquo; (con opciones de personalizar todos los parámetros posibles); pero esta no es la cuestión, no se equivocó el que dijo que el hábito hace al monje.&lt;/p&gt;
&lt;p&gt;Es imprescindible interiorizar desde temprano la necesidad de escribir organizadamente el código, para ello debe comenzarse imitando la forma de hacerlo de algún profesor o compañero y luego al ir tomando experiencia adaptarlo poco a poco a nuestros gustos hasta contar con el nuestro propio al paso de los años. Esto llega sin apenas darnos cuenta de que pasó, el día que menos se lo imagina nos sorprendemos escribiendo rutinas rutinariamente (valga la redundancia).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>No basta con solo construir</title>
      <link>/es/post/solo-desplegar-no-basta/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/post/solo-desplegar-no-basta/</guid>
      
        <description>&lt;p&gt;La experiencia nos ha mostrado que la creación de un sitio web debe partir de una planeación, seguido por una construcción del sitio y posteriormente ejecutar un proceso de medición para garantizar que los resultados se cumplan. Sin embargo, en la práctica, tal vez por parecer muy fácil su construcción, o por la poca disponibilidad de tiempo se arranca por la construcción, obviando la planeación e impidiendo la medición.&lt;/p&gt;
&lt;p&gt;La tecnología de Internet y en especial la tecnología web hace muy fácil la publicación de una aplicación, por lo que la planeación nos parece trivial. Tal vez esto sea válido para un sitio personal, pero cuando se trata de respaldar las estrategias del negocio, y en ocasiones el sitio web ES la estrategia competitiva mas importante, no se puede construir sin planear.&lt;/p&gt;
&lt;p&gt;La planeación cubre aspectos fundamentales del sitio como la funcionalidad que se quiere manejar para los diferentes públicos que accederán al portal. Hay una funcionalidad especificada en el qué, y otra que debe cubrir el cómo (la técnica). En otras palabras, se debe estipular lo que podrá hacer un usuario en el portal, y también como se implementará desde el punto de vista técnico para que se pueda realizar. Esta funcionalidad se desprende entonces en unos documentos que especifican la construcción de software que se requiere, y el diseño de la parte gráfica del sitio.&lt;/p&gt;
&lt;p&gt;También se debe desprender de la planeación la estrategia para garantizar que el portal llegará como queremos que llegue a los diferentes públicos objetivo. Si es para nuestros proveedores, por ejemplo, bastará con hacer una campaña de expectativa a través de una comunicación física, y luego implementar un procedimiento que obligue a la utilización del portal para efectuar las transacciones.&lt;/p&gt;
&lt;p&gt;Si el portal es para el público en general, como puede aplicar para una tienda virtual, se requiere establecer una campaña de mercadeo que permita llegar por los medios tradicionales a todo el público objetivo, y un plan de fidelización que promueva la compra repetitiva. Ninguno de estos ejemplos que he colocado es tarea fácil, y su dificultad aumenta en la medida en que haya menos tiempo para desarrollarla.&lt;/p&gt;
&lt;p&gt;Sin planeación, tampoco se tienen parámetros claros contra los cuales se pueda medir entonces el resultado del esfuerzo. Pero suponiendo que de alguna manera podamos censar que el resultado es menor al deseado, efectuar las tareas de planeación una vez desarrollado el portal es mucho más difícil y puede inclusive obligar a cambios en el portal y hasta un rediseño total.&lt;/p&gt;
&lt;p&gt;Quedaba un factor por analizar, y es el de la generación de contenido para el portal. Es imperante que haya una estrategia al interior de la empresa para garantizar que el contenido del mismo es acorde con las necesidades de los públicos. Si tenemos un catálogo de productos, se deberá actualizar los precios, agregar y eliminar productos, y demás funciones requeridas. Si se van a efectuar pagos, habrá que conciliar las cuentas y tener como proveer al cliente consulta sobre el estado de su pedido. Si es un sitio de contenido, habrá que manejar la imagen y el texto en forma ágil y oportuna.&lt;/p&gt;
&lt;p&gt;Estas actividades no se prevén en la construcción. Simplemente se construye y se coloca al aire, para ver que, al cabo del tiempo, y sin importar el monto de la inversión, el sitio no tuvo ningún impacto positivo y, por el contrario, podría afectar negativamente a la empresa.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
