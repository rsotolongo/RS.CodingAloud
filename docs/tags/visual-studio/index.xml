<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Coding Aloud</title>
    <link>/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on Coding Aloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploying NuGet packages</title>
      <link>/post/deploying-nuget-packages/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/deploying-nuget-packages/</guid>
      <description>Source code of support available at GitHub
I a previous post we saw how to: &amp;ldquo;Create NuGet packages&amp;rdquo; but the deployment step was still a manual process. Let&amp;rsquo;s try to automatize this. Figure 1 shows how to generate NuGet package for a .NET Core project (similar to the approach previously shown) using the project&amp;rsquo;s properties.
Figure 1: &amp;ldquo;Creating NuGet package&amp;rdquo;.
This adds a couple of lines into the project file (.</description>
    </item>
    
    <item>
      <title>Creating NuGet packages</title>
      <link>/post/creating-nuget-packages/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/creating-nuget-packages/</guid>
      <description>Lately I have been involved in the creation of several NuGet packages useful for some portals being developed. I want to share my knowledge in this topic.
If we were developing libraries for .NET Core or .NET Standard life would be easy as figure 1 to figure 8 shows.
Figure 1: &amp;ldquo;Creating a new .NET Core library&amp;rdquo;.
Figure 2: &amp;ldquo;Default code&amp;rdquo;.
Figure 3: &amp;ldquo;First build results&amp;rdquo;.
Figure 4: &amp;ldquo;Project properties&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Creating and deploying releases using Octopus</title>
      <link>/post/using-octopus/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/using-octopus/</guid>
      <description>Source code of support available at GitHub
Since while ago I wanted to share my experiences automatizing the product releases with Octopus from Visual Studio. Again, let’s do it through an example.
As it could not be otherwise, figure 1 shows the first package you should add to your project in order to create Octopus packages ready to be deployed: &amp;ldquo;OctoPack&amp;rdquo;. The latest package version available at the time of this tutorial was the &amp;ldquo;3.</description>
    </item>
    
    <item>
      <title>Coding style using StyleCop</title>
      <link>/post/stylecop-coding-style/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/stylecop-coding-style/</guid>
      <description>A colleague ask me to share my experience coding with ReSharper and once he heard that I’m not use ReSharper he was even more curious about how I write source codes. Who knows me knows I love NuGet packages and be updated constantly, that’s why I found a very useful package that I install in all my projects as soon I start it.
StyleCop.MSBuild
StyleCop used to be a standalone application with integration with Visual Studio but that changed a while ago.</description>
    </item>
    
  </channel>
</rss>
